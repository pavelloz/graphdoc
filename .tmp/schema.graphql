schema {
  query: RootQuery
  mutation: RootMutation
}

enum ACL {
  """
  private
  """
  private

  """
  public (read only)
  """
  public
}

input ActiveRecordReference {
  id: ID
  ids: [ID]
  type: String!
}

type ActivityStreamsActivity {
  id: ID!
  payload: ActivityStreamsPayload
  uuid: String!
}

type ActivityStreamsActivityCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [ActivityStreamsActivity!]
  total_entries: Int!
  total_pages: Int!
}

type ActivityStreamsActivityStreamCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [ActivityStreamsActivity!]
  total_entries: Int!
  total_pages: Int!
  unread_count: Int!
}

type ActivityStreamsFeed {
  ids: [ID!]
  name: String
}

type ActivityStreamsHandler {
  filter: ActivityStreamsPayload
  id: ID!
  name: String
  targets: ActivityStreamsPayload
}

type ActivityStreamsHandlerCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [ActivityStreamsHandler!]
  total_entries: Int!
  total_pages: Int!
}

"""
Represents ActivityPayload objects
"""
scalar ActivityStreamsPayload

input AddressImport {
  address: String
  address2: String
  apartment: String
  city: String
  country: String
  iso_country_code: String
  lat: Float
  lng: Float

  """
  name of the defined property
  """
  name: String!
  postcode: String
  service_radius: String
  state: String
  street: String
  street_number: String
  suburb: String
}

interface AdminPropertiesInterface {
  """
  Deprecated, use properties instead.
  """
  fields: [Property!]! @deprecated(reason: "Use properties")

  """
  List of properties attributes to be included in the results
  """
  properties: [Property!]!
}

interface AdminSharedAttributesInterface {
  created_at: JSONDate!
  id: ID!
  metadata: HashObject

  """
  defines the physical path of the file
  """
  physical_file_path: String
  updated_at: JSONDate!
}

input AggregationField {
  aggregations: [AggregationField]
  customization_name: String
  customization_property_name: String
  field_name: String
  name: String!
  profile_property_name: String
  profile_type: String
  size: Int = 200

  """
  sort buckets; default is by doc-count descending
  """
  sort: AggregationSort
  type: AggregationTypeEnum = terms
}

input AggregationSort {
  name: AggregationSortFieldEnum = _term
  order: AggregationSortOrderEnum = asc
}

enum AggregationSortFieldEnum {
  """
  document count sort
  """
  _count

  """
  alpha sort
  """
  _term
}

enum AggregationSortOrderEnum {
  """
  ascending
  """
  asc

  """
  descending
  """
  desc
}

enum AggregationTypeEnum {
  """
  A single-value metrics aggregation that keeps track and returns the average
  value among the values extracted from the aggregated documents.
  """
  avg

  """
  A single-value metrics aggregation that keeps track and returns the maximum
  value among the values extracted from the aggregated documents.
  """
  max

  """
  A single-value metrics aggregation that keeps track and returns the minimum
  value among the values extracted from the aggregated documents.
  """
  min

  """
  A multi-bucket value source based aggregation where buckets are dynamically built - one per unique value.
  """
  terms
}

type Aggregations {
  compact: JSONPayload
  raw: JSONPayload
}

"""
Could be any of String Number Object Date and so on. Anytype
"""
scalar Any

"""
ApiCall Notification
"""
type ApiCallNotification implements AdminSharedAttributesInterface {
  """
  liquid code which can be used to process the response from the endpoint. You have access to "response" variable.
  """
  callback: String

  """
  liquid code to evaluate to whatever you want to send, for example a JSON.
  """
  content: String
  created_at: JSONDate!

  """
  liquid code which should evaluate to integer. Delays invoking the job by
  specified number of minutes. Useful to invoke code at certain point in time,
  for example 1 hour before something etc. To calculate proper number you can
  use time_diff filter.
  """
  delay_by: String

  """
  form configurations which trigger the email
  """
  form_configurations: [FormConfiguration!] @deprecated(reason: "use forms")

  """
  forms which trigger the email
  """
  forms: [Form!]

  """
  liquid code to evaluate to valid json of request headers
  """
  headers: String
  id: ID!
  metadata: HashObject

  """
  name of the api call, which is used in form_configurations or mutation to trigger it
  """
  name: String!

  """
  defines the physical path of the file
  """
  physical_file_path: String

  """
  Liquid code which should evaluate to valid request type: Get, Post, Put,
  Patch, Delete or if you want to send binary files: Post_Multipart,
  Put_Multipart, Patch_Multipart
  """
  request_type: String!

  """
  liquid code to evaluate to valid endpoint for the request.
  """
  to: String!

  """
  liquid code which should evaluate to true if the api call should be sent
  """
  trigger_condition: String
  updated_at: JSONDate!
}

type ApiCallNotificationCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [ApiCallNotification!]
  total_entries: Int!
  total_pages: Int!
}

input ApiCallNotificationInputType {
  """
  liquid code which can be used to process the response from the endpoint. You have access to "response" variable.
  """
  callback: String

  """
  liquid code to evaluate to whatever you want to send, for example a JSON.
  """
  content: String

  """
  liquid code which should evaluate to integer. Delays invoking the job by
  specified number of minutes. Useful to invoke code at certain point in time,
  for example 1 hour before something etc. To calculate proper number you can
  use time_diff filter.
  """
  delay_by: String = "0"

  """
  ids of form configurations which should trigger the api call
  """
  form_configuration_ids: [ID]

  """
  Request headers
  """
  headers: HashObject
  metadata: HashObject

  """
  name of the api call, which is used in form_configurations or mutation to trigger it
  """
  name: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/notifications/api_call_notifications/my_api_call_notification
  """
  physical_file_path: String!

  """
  Liquid code which should evaluate to valid request type: Get, Post, Put,
  Patch, Delete or if you want to send binary files: Post_Multipart,
  Put_Multipart, Patch_Multipart
  """
  request_type: String!

  """
  liquid code to evaluate to valid endpoint for the request.
  """
  to: String!

  """
  liquid code which should evaluate to true if the api call should be sent
  """
  trigger_condition: String = "true"
}

input ApiCallNotificationsFilterInput {
  callback: StringFilter
  content: StringFilter
  created_at: DateFilter

  """
  Deprecated - use delay_by
  """
  delay: StringFilter
  delay_by: StringFilter
  headers: StringFilter
  id: UniqIdFilter

  """
  Filter by metadata properties
  """
  metadata: JsonbFilter
  name: StringFilter
  to: StringFilter
  trigger_condition: StringFilter
  updated_at: DateFilter
}

input ApiCallNotificationsSortInput {
  created_at: StandardSort
  id: StandardSort
  metadata: [JsonbSort!]
  name: StandardSort
  updated_at: StandardSort
}

"""
Autogenerated return type of ApiCallSend
"""
type ApiCallSendPayload {
  errors: [BaseError!]!
  response: Response
}

type Asset implements AdminSharedAttributesInterface {
  created_at: JSONDate!
  deleted_at: JSONDate
  id: ID!
  metadata: HashObject

  """
  Name of the asset
  """
  name: String!

  """
  defines the physical path of the file
  """
  physical_file_path: String
  updated_at: JSONDate!

  """
  Url to the file
  """
  url: String!
}

type AssetCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [Asset!]
  total_entries: Int!
  total_pages: Int!
}

input AssetInput {
  name: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/assets/logo.png
  """
  physical_file_path: String!
  url: String!
}

input AssetPresignInput {
  path: String!
}

"""
Autogenerated return type of AssetsCreateMutation
"""
type AssetsCreateMutationPayload {
  assets: [Asset!]!
}

input AssetsFilterInput {
  created_at: DateFilter
  id: UniqIdFilter

  """
  Filter by metadata properties
  """
  metadata: JsonbFilter
  name: StringFilter
  updated_at: DateFilter
}

"""
Autogenerated return type of AssetsPresignUrlsMutation
"""
type AssetsPresignUrlsMutationPayload {
  urls: [PresignedUrl!]!
}

input AssetsSortInput {
  created_at: StandardSort
  id: StandardSort
  metadata: [JsonbSort!]
  name: StandardSort
  updated_at: StandardSort
}

enum AsyncCallbackPriority {
  """
  default - max timeout: 5 minutes
  """
  default

  """
  high - max timeout: 1 minute
  """
  high

  """
  low - max timeout: 4 hours
  """
  low
}

input AtachmentInputType {
  """
  File URL returned by directly uploading it to platformOS s3 bucket using pre-signed URL
  """
  file: String

  """
  Name of the property
  """
  name: String!

  """
  External url to the file
  """
  remote_file_url: String
}

enum AttachmentContentDispositionEnum {
  """
  download
  """
  download

  """
  inline
  """
  inline
}

input AttachmentContentLengthRange {
  gte: Int!
  lte: Int!
}

input AttachmentModelPropertyInput {
  model_schema_name: String!
  property_name: String!
}

input AttachmentPresignUrlInput {
  content_disposition: AttachmentContentDispositionEnum = inline

  """
  file size limitation in KiB. ex. [gte: 1, lte: 1024] allows file size from 1KiB to 1 MiB 
  """
  content_length: AttachmentContentLengthRange

  """
  Choose property which should be used to generate versions, versions defined in yml schema file
  """
  model_property: AttachmentModelPropertyInput

  """
  Choose property which should be used to generate versions, versions defined in yml schema file
  """
  user_property: AttachmentUserPropertyInput
}

type AttachmentPresignedUploadUrl {
  """
  Direct s3 upload endpoint to which you can upload files. Make sure you include upload_url_payload with the request
  """
  upload_url: String!

  """
  Payload you need to provide for upload_url
  """
  upload_url_payload: HashObject!
}

input AttachmentUserPropertyInput {
  property_name: String!
}

input AttachmentsImport {
  """
  direct path to file on S3
  """
  direct_path: String

  """
  ID will ignored.
  """
  id: ID

  """
  name of the defined property
  """
  name: String!

  """
  URL to presigned slot on S3
  """
  url: String
}

"""
Authentication using provider
"""
type Authentication {
  """
  timestamp of when the record was created, automatically generated by the system
  """
  created_at: JSONDate

  """
  timestamp of when the record was soft delete, populated by delete action. It
  is also possible to manually set it via update. To undelete change it back to
  empty value, but please note that associated records would need to be manually
  undeleted as well.
  """
  deleted_at: JSONDate
  id: ID

  """
  name of authentication provider used for creating this authentication
  """
  provider: AuthenticationProvider
  raw_info: HashObject
  token: String
  token_expires_at: JSONDate
  uid: String

  """
  timestamp of when the record was updated, automatically generated by the system
  """
  updated_at: JSONDate
}

input AuthenticationInputType {
  provider: AuthenticationProvider!
  raw_info: HashObject
  token: String
  token_expires_at: JSONDate
  uid: String
}

"""
List of authentication providers
"""
enum AuthenticationProvider {
  """
  auth0
  """
  auth0

  """
  facebook
  """
  facebook

  """
  github
  """
  github

  """
  google
  """
  google

  """
  instagram
  """
  instagram

  """
  linkedin
  """
  linkedin

  """
  openid_connect
  """
  openid_connect

  """
  saml
  """
  saml

  """
  twitter
  """
  twitter
}

input AuthorizationPoliciesFilterInput {
  content: StringFilter
  created_at: DateFilter
  flash_alert: StringFilter
  id: UniqIdFilter

  """
  Filter by metadata properties
  """
  metadata: JsonbFilter
  name: StringFilter
  redirect_to: StringFilter
  updated_at: DateFilter
}

input AuthorizationPoliciesSortInput {
  created_at: StandardSort
  id: StandardSort
  metadata: [JsonbSort!]
  name: StandardSort
  updated_at: StandardSort
}

"""
Authorization Policy is used to restrict access to pages and forms
"""
type AuthorizationPolicy implements AdminSharedAttributesInterface {
  authorization_policy_associations: [AuthorizationPolicyAssociation!]
  content: String!
  created_at: JSONDate!
  flash_alert: String

  """
  use this status code when authorization fails; usually 404 or 403
  """
  http_status: Int
  id: ID!
  metadata: HashObject
  name: String!

  """
  defines the physical path of the file
  """
  physical_file_path: String
  redirect_to: String
  updated_at: JSONDate!
}

type AuthorizationPolicyAssociation {
  """
  id of the admin resource
  """
  authorizable_id: ID!

  """
  type of the admin resource - Page or Form
  """
  authorizable_type: String!

  """
  id of the authorization policy
  """
  authorization_policy_id: ID!
  created_at: JSONDate!
  id: ID!
  updated_at: JSONDate!
}

type AuthorizationPolicyCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [AuthorizationPolicy!]
  total_entries: Int!
  total_pages: Int!
}

input AuthorizationPolicyInputType {
  content: String!
  flash_alert: String
  metadata: HashObject
  name: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/authorization_policies/my_policy
  """
  physical_file_path: String
  redirect_to: String
}

"""
Background Job
"""
type BackgroundJob {
  """
  how many times the job was tried to be processed. By default the job is not retried on error.
  """
  attempts: Int
  created_at: JSONDate!

  """
  error which made the job fail
  """
  error: String

  """
  not null when exception encounered during processing the job
  """
  failed_at: JSONDate

  """
  populated if the background job was invoked by form configuration
  """
  form_configuration_name: String @deprecated(reason: "use form_name")

  """
  populated if the background job was invoked by form configuration
  """
  form_name: String
  id: ID!

  """
  job label
  """
  label: String
  locked_at: JSONDate

  """
  which queue is used to process the job
  """
  queue: String!

  """
  populated if the background job was invoked by form configuration
  """
  resource_id: ID

  """
  populated if the background job was invoked by form configuration
  """
  resource_type: String
  run_at: JSONDate!

  """
  populated if the background job was invoked by form configuration
  """
  source_name: String

  """
  populated if the background job was invoked by form configuration
  """
  source_type: String
  updated_at: JSONDate!
}

type BackgroundJobCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [BackgroundJob!]
  total_entries: Int!
  total_pages: Int!
}

input BackgroundJobsFilterInput {
  created_at: DateFilter
  failed_at: DateFilter
  form_configuration_name: StringFilter
  id: UniqIdFilter
  label: StringFilter
  locked_at: DateFilter
  queue: StringFilter
  resource_id: UniqIdFilter
  resource_type: StringFilter
  run_at: DateFilter
  source_name: StringFilter
  source_type: StringFilter
  updated_at: DateFilter
}

input BackgroundJobsSortInput {
  attempts: StandardSort
  created_at: StandardSort
  failed_at: StandardSort
  form_configuration_name: StandardSort
  id: StandardSort
  label: StandardSort
  locked_at: StandardSort
  queue: StandardSort
  resource_id: StandardSort
  resource_type: StandardSort
  run_at: StandardSort
  source_name: StandardSort
  source_type: StandardSort
  updated_at: StandardSort
}

"""
Stored Bank Account
"""
type BankAccount {
  bank_name: String
  id: ID!
  instance_client_id: ID
  name: String
  payment_method_id: ID
}

input BankAccountInputType {
  payment_method_id: ID!
  public_token: String!
}

"""
Base error message
"""
type BaseError {
  """
  A description of the error
  """
  message: String!
}

input BooleanFilter {
  """
  filter whether value was not set
  """
  is_null: Boolean
  not_value: Boolean
  value: Boolean
}

type CMSItemDefinition {
  fields: [String]!
  name: CMSItemType!
  path: JSONPayload!
}

type CMSItemDefinitionCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [CMSItemDefinition!]
  total_entries: Int!
  total_pages: Int!
}

type CMSItemPayload {
  data: JSONPayload
  resource_name: String!
  type: CMSItemType
}

type CMSItemPayloadCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [CMSItemPayload!]
  total_entries: Int!
  total_pages: Int!
}

enum CMSItemType {
  ActivityStreamsGroupingHandler
  ActivityStreamsHandler
  ApiCallNotification
  Asset
  AuthorizationPolicy
  CustomModelType
  EmailNotification
  FormConfiguration
  GraphQuery
  InstanceProfileType
  LiquidView
  Migration
  Page
  RelationshipTransactableType
  RelationshipType
  RelationshipUserType
  SmsNotification
  TransactableType
  Translation
  UserType
}

"""
Deprecated
"""
type Communication {
  phone_number: String!
  verified: Boolean!
}

input ContentLengthRange {
  gte: Int!
  lte: Int!
}

"""
Stored Credit Card
"""
type CreditCard {
  default_card: Boolean
  id: ID!
  instance_client_id: ID
  name: String
  payment_method_id: ID
  token: String
}

input CreditCardInputType {
  credit_card_token: String!
  payment_method_id: ID!
}

"""
Color can be represented by: hex - "#000000", name - "red", rgba - "rgba(0,0,0,0.5)", hsla - "hsla(0%, 0%, 0%, 50%)"
"""
scalar CssColor

type CustomAddrress {
  address: String
  address2: String
  apartment: String
  city: String
  country: String
  id: Int!
  iso_country_code: String
  lat: Float
  lng: Float
  name: String
  point: GeoPointType
  postcode: String
  service_radius: String
  state: String
  street: String
  street_number: String
  suburb: String
}

type CustomAttachment {
  created_at: JSONDate
  file_url: String
  id: ID!
}

input CustomAttachmentInputType {
  """
  attribute of type file with which the created attachment should be associated
  - must be defined in the schema of the record, for example CustomModelType for
  Customization, InstanceProfileType for UserProfile or user.yml for User
  """
  custom_attribute_name: String!

  """
  URL to image that was uploaded to s3 presigned url
  """
  direct_url: String

  """
  allows you to create attachment with your own content; useful for generating reports, pdf, csv etc
  """
  generate_file: ProcessStrategyInputType

  """
  id of associated record - Model, UserProfile, User
  """
  owner_id: ID!

  """
  class of associated record - Model, UserProfile, User
  """
  owner_type: String!

  """
  deprecated, ignore
  """
  page_slug: String

  """
  create attachment based on a file available on remote location
  """
  raw_remote_file_url: String

  """
  id of a user who uploads the attachment
  """
  uploader_id: ID
}

"""
Definition of Custom attribute
"""
type CustomAttributeDefinition {
  attribute_type: String
  id: ID
  name: String
}

input CustomAttributeInputType {
  """
  Adds provided value at the end of an array property. It's secure atomic operation executed in separate transaction
  """
  array_append: String

  """
  Removes provided value from an array property. It's secure atomic operation executed in separate transaction
  """
  array_remove: String

  """
  Decrements property value by provided value. It's secure atomic operation executed in separate transaction
  """
  decrement: Float

  """
  Increments property value by provided value. It's secure atomic operation executed in separate transaction
  """
  increment: Float
  name: String
  value: String
  value_array: [String]
  value_boolean: Boolean
  value_float: Float
  value_int: Int
  value_json: JSONPayload
}

type CustomImage {
  """
  timestamp of when the record was created, automatically generated by the system
  """
  created_at: JSONDate!

  """
  timestamp of when the record was soft delete, populated by delete action. It
  is also possible to manually set it via update. To undelete change it back to
  empty value, but please note that associated records would need to be manually
  undeleted as well.
  """
  deleted_at: JSONDate
  file_url: String @deprecated(reason: "use `url`")
  id: ID!
  name: String
  property_id: ID

  """
  timestamp of when the record was updated, automatically generated by the system
  """
  updated_at: JSONDate!
  uploader_id: ID

  """
  image url; ex: thumb: url(version: "thumb")
  """
  url(version: String): String!
}

type CustomImageCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [CustomImage!]
  total_entries: Int!
  total_pages: Int!
}

input CustomImageInputType {
  custom_attribute_name: String

  """
  URL to image that was uploaded to s3 presigned url
  """
  direct_url: String

  """
  id of associated record - Customization, UserProfile, User
  """
  owner_id: ID

  """
  class of associated record - Customization, UserProfile, User
  """
  owner_type: String

  """
  deprecated
  """
  page_slug: String

  """
  id of the user who uploads the attachment
  """
  uploader_id: ID
}

union Customizable = Listing | Profile | User

enum CustomizableTypeEnum {
  """
  Customization
  """
  Customization

  """
  Payment
  """
  Payment

  """
  Relationship
  """
  Relationship

  """
  Transactable
  """
  Transactable

  """
  User
  """
  User

  """
  UserProfile
  """
  UserProfile
}

type Customization implements LegacyCustomAttributeInterface & ListingsMetadata & PropertiesInterface & RelationOnDemandInterface & RemoteModelInterface {
  """
  Fetch address by name; ex: address: address(name: "office_address")
  """
  address(name: String!): CustomAddrress

  """
  Fetch all addresses, optionally you can filter results by name; ex: home_address: addresses(name: "home")
  """
  addresses(name: String): [CustomAddrress!]

  """
  Fetch attachment by name; ex: sales_report: attachment(name: "sales_report")
  """
  attachment(name: String!): PrivateFile

  """
  Fetch all attachments, optionally you can filter results by name; ex: sales_reports: attachments(name: "sales_report")
  """
  attachments(name: String): [PrivateFile!]

  """
  timestamp of when the record was created, automatically generated by the system
  """
  created_at: JSONDate

  """
  Fetch address by name; ex: address: custom_address(name: "office_address")
  """
  custom_address(name: String!): CustomAddrress @deprecated(reason: "Use address")

  """
  Fetch all addresses, optionaly you can filter results by name; ex: home: custom_addresses(name: "home")
  """
  custom_addresses(name: String): [CustomAddrress!] @deprecated(reason: "Use addresses")

  """
  Fetch attachment by name; ex: sales_report: custom_attachment(name: "sales_report")
  """
  custom_attachment(name: String!): PrivateFile @deprecated(reason: "Use attachment")

  """
  Fetch all attachments, optionally you can filter results by name; ex:
  sales_reports: custom_attachments(name: "sales_report")
  """
  custom_attachments(name: String): [PrivateFile!] @deprecated(reason: "Use attachments")

  """
  Fetch image by name; ex: header: custom_image(name: "header")
  """
  custom_image(name: String!): Image @deprecated(reason: "Use image")

  """
  Fetch all images, optionaly you can filter results by name; ex: cat_images: custom_images(name: "cat")
  """
  custom_images(name: String): [Image!] @deprecated(reason: "Use images")
  customizable: Customizable

  """
  id of a parent, which can other customization, user profile or user
  """
  customizable_id: ID

  """
  class of a parent - Customization, User or UserProfile
  """
  customizable_type: String

  """
  timestamp of when the record was soft delete, populated by delete action. It
  is also possible to manually set it via update. To undelete change it back to
  empty value, but please note that associated records would need to be manually
  undeleted as well.
  """
  deleted_at: JSONDate

  """
  Used mainly for import/export, if you want to use third party service as a source of truth
  """
  external_id: ID
  human_name: String
  id: ID

  """
  Fetch image by name; ex: header: image(name: "header")
  """
  image(name: String!): Image

  """
  Fetch all images, optionally you can filter results by name; ex: cat_images: images(name: "cat")
  """
  images(name: String): [Image!]

  """
  Defines belongs-to relation with other model; ex: parent: model(model_name:
  "parent", join_on_property: "parent_id") { id }
  """
  model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_name: String
  ): ListingsCustomization @deprecated(reason: "use `related_model`")

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_name: [String]
  ): [ListingsCustomization!] @deprecated(reason: "use `related_models`")
  name: String

  """
  List of all properties assigned to the object.
  """
  properties: HashObject

  """
  Fetch any property by name and return value as a String; ex: hair_color: property(name: "hair_color")
  """
  property(name: String!): String

  """
  Fetch any property by name and return value as an Array of Strings. ex: todo_list: property_array(name: "todo_list")
  """
  property_array(name: String!): [String!]

  """
  Fetch any property by name and return value as a Boolean; ex: price: property_boolean(name: "enabled")
  """
  property_boolean(name: String!): Boolean

  """
  Fetch any property by name and return value as a Float; ex: price: property_float(name: "price")
  """
  property_float(name: String!): Float

  """
  Fetch any property by name and return value as an Integer; ex: age: property_int(name: "age")
  """
  property_int(name: String!): Int

  """
  Fetch any property by name and return value as a JSON.
  """
  property_json(name: String!): JSONPayload

  """
  Defines belongs-to relation with other model; ex: parent: model(model_name:
  "parent", join_on_property: "parent_id") { id }
  """
  related_model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_schema_name: String
  ): ListingsCustomization

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  related_models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_schema_name: [String]
  ): [ListingsCustomization!]

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  related_user(foreign_property: String = "id", join_on_property: String = "user_id"): User

  """
  Defines relation object accessible over HTTP in JSON collection identified by it's ID.
  """
  remote_model(
    """
    Endpoint that will return resources for given ids in json format
    """
    endpoint: Endpoint!

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String!
  ): Customization

  """
  when sorting by distance - field contains distance to target location
  """
  sort_score: [Int] @deprecated(reason: "not supported everywhere")

  """
  timestamp of when the record was updated, automatically generated by the system
  """
  updated_at: JSONDate

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  user(foreign_property: String = "id", join_on_property: String = "user_id"): User @deprecated(reason: "use `related_users`")
  user_id: ID
}

input CustomizationImport {
  addresses: [AddressImport!]
  attachments: [AttachmentsImport!]
  created_at: ISO8601DateTime
  customizable_id: ID
  customizable_type: CustomizableTypeEnum

  """
  ID will be stored as external_id, relations will be preseved. We generate it when empty.
  """
  id: ID
  images: [ImagesImport!]

  """
  ex. {"color": "red"}
  """
  properties: HashObject
  type_name: String!
  updated_at: ISO8601DateTime
  user_id: ID
}

input CustomizationInputType {
  created_at: JSONDate
  custom_attachments: [AtachmentInputType]
  custom_images: [ImageInputType]
  custom_model_type_id: ID

  """
  deprecated, use model_schema_name
  """
  custom_model_type_name: String
  customizable_id: ID
  customizable_type: CustomizableTypeEnum
  customizations: [CustomizationsInputType]
  deleted_at: JSONDate
  external_id: ID
  id: ID
  model_schema_name: String
  models: [CustomizationsInputType]
  properties: [CustomAttributeInputType]

  """
  deprectated, use properties
  """
  title: String
  user_id: ID
}

input CustomizationSortOrder {
  """
  Sort by given field value
  """
  field: String
  order: String = "asc"

  """
  Sort by given property value
  """
  property: String
}

input CustomizationsInputType {
  name: String
  values: CustomizationInputType
}

input CustomizationsSortOrder {
  """
  Sort by field name
  """
  name: String
  order: String = "asc"

  """
  Sort by property field
  """
  property_name: String
}

input DateFilter {
  exists: Boolean
  gt: String
  gte: String
  lt: String
  lte: String
  not_value: String
  not_value_in: [String!]
  value: String
  value_in: [String!]
}

input DateRange {
  gt: String
  gte: String
  lt: String
  lte: String
}

input DefaultProfileInputType {
  custom_attachments: [AtachmentInputType]
  custom_images: [ImageInputType]
  deleted_at: JSONDate
  properties: [CustomAttributeInputType]
}

enum DistanceUnit {
  """
  Centimeters
  """
  cm

  """
  Kilometers
  """
  km

  """
  Meters
  """
  m

  """
  Miles
  """
  mi

  """
  Nautical Miles
  """
  nmi

  """
  Yards
  """
  yd
}

"""
Email Notification
"""
type EmailNotification implements AdminSharedAttributesInterface {
  """
  json of the form { "file_name.jpg": { "url": "http://example.com/file.jpg" } }
  which defines email attachments. Liquid will be processed.
  """
  attachments: String

  """
  Comma separated blind carbon copy list. Liquid allowed. For example "john@example.com, jane@example.com"
  """
  bcc: String

  """
  Comma separated carbon copy list. Liquid allowed. For example "john@example.com, jane@example.com"
  """
  cc: String

  """
  liquid code to evaluate to valid form html. If email is triggered via form
  configuration, You have access to "form" variable, with data specified in the configuration.
  """
  content: String
  created_at: JSONDate!

  """
  liquid code which should evaluate to integer. Delays invoking the job by
  specified number of minutes. Useful to invoke code at certain point in time,
  for example 1 hour before something etc. To calculate proper number you can
  use time_diff filter.
  """
  delay_by: String

  """
  form configurations which trigger the email
  """
  form_configurations: [FormConfiguration!] @deprecated(reason: "use forms")

  """
  forms which trigger the email
  """
  forms: [Form!]

  """
  email address from which you would like to send the email, for example notifications@mydomain.com
  """
  from: String
  id: ID!

  """
  name of the liquid layout to which the content should be injected
  """
  layout_path: String
  metadata: HashObject

  """
  name of the email, which is used in form_configurations or mutation to trigger it
  """
  name: String!

  """
  defines the physical path of the file
  """
  physical_file_path: String

  """
  email address to which users should reply, for example support@mydomain.com
  """
  reply_to: String

  """
  liquid code to evaluate to text
  """
  subject: String

  """
  Comma separated recipient list. Liquid allowed. For example: "john@example.com, jane@example.com"
  """
  to: String

  """
  liquid code which should evaluate to true if the email should be sent
  """
  trigger_condition: String
  updated_at: JSONDate!
}

type EmailNotificationCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [EmailNotification!]
  total_entries: Int!
  total_pages: Int!
}

input EmailNotificationInputType {
  """
  json of the form { "file_name.jpg": { "url": "http://example.com/file.jpg" } }
  which defines email attachments. Liquid will be processed.
  """
  attachments: String

  """
  liquid code to evaluate to valid, comma separated blind carbon copy list, for example "john@example.com, jane@example.com"
  """
  bcc: String

  """
  liquid code to evaluate to valid, comma separated carbon copy list, for example "john@example.com, jane@example.com"
  """
  cc: String

  """
  liquid code to evaluate to valid form html. If email is triggered via form
  configuration, You have access to "form" variable, with data specified in configuration.
  """
  content: String

  """
  liquid code which should evaluate to integer. Delays invoking the job by
  specified number of minutes. Useful to invoke code at certain point in time,
  for example 1 hour before something etc. To calculate proper number you can
  use time_diff filter.
  """
  delay_by: String = "0"

  """
  ids of form configurations which should trigger the email
  """
  form_configuration_ids: [ID]

  """
  email address from which you would like to send the email, for example notifications@mydomain.com
  """
  from: String

  """
  name of the liquid layout to which the content should be injected
  """
  layout_path: String
  metadata: HashObject

  """
  name of the email, which is used in form_configurations or mutation to trigger it
  """
  name: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/notifications/email_notifications/my_email_notification
  """
  physical_file_path: String!

  """
  email address to which users should reply, for example support@mydomain.com
  """
  reply_to: String

  """
  liquid code to evaluate to text
  """
  subject: String!

  """
  liquid code to evaluate to valid, comma separated recipient list, for example "john@example.com, jane@example.com"
  """
  to: String

  """
  liquid code which should evaluate to true if the email should be sent
  """
  trigger_condition: String = "true"
}

input EmailNotificationsFilterInput {
  attachments: StringFilter
  bcc: StringFilter
  cc: StringFilter
  content: StringFilter
  created_at: DateFilter

  """
  Deprecated - use delay_by
  """
  delay: StringFilter
  delay_by: StringFilter
  id: UniqIdFilter
  layout_path: StringFilter

  """
  Filter by metadata properties
  """
  metadata: JsonbFilter
  name: StringFilter
  subject: StringFilter
  to: StringFilter
  trigger_condition: StringFilter
  updated_at: DateFilter
}

input EmailNotificationsSortInput {
  created_at: StandardSort
  id: StandardSort
  metadata: [JsonbSort!]
  name: StandardSort
  updated_at: StandardSort
}

type EncryptedConstant {
  created_at: JSONDate!
  deleted_at: JSONDate

  """
  Name of the constant
  """
  name: String!
  updated_at: JSONDate!

  """
  Decrypted value of a constant
  """
  value: String!
}

type EncryptedConstantCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [EncryptedConstant!]
  total_entries: Int!
  total_pages: Int!
}

input EncryptedConstantFilterInput {
  created_at: DateFilter
  id: UniqIdFilter
  name: String
  updated_at: DateFilter
}

input EncryptedConstantsFilterInput {
  created_at: DateFilter
  id: UniqIdFilter
  name: StringFilter
  updated_at: DateFilter
}

input EncryptedConstantsSortInput {
  created_at: StandardSort
  id: StandardSort
  name: StandardSort
  updated_at: StandardSort
}

input Endpoint {
  """
  authentication token
  """
  token: String

  """
  endpoint url
  """
  url: String!
}

type FlashMessages {
  alert: String
  notice: String
}

"""
Form configuration - deprecated, use Form
"""
type Form implements AdminSharedAttributesInterface {
  """
  associated api call notifications
  """
  api_call_notifications: [ApiCallNotification!]

  """
  Same as callback, but invoked asynchronously. Recommended for performance reason.
  """
  async_callback_actions: String

  """
  Delays invoking the job by specified number of minutes. Liquid allowed -
  useful to invoke code at certain point in time, for example 1 hour before
  something etc. To calculate proper number you can use time_diff filter.
  """
  async_callback_delay: String

  """
  Defines max number of retrying attempts in case of an error. Usually you do not want to change it.
  """
  async_callback_max_attempts: Int

  """
  defines the invocaction priority, the higher the quicker timeout
  """
  async_callback_priority: AsyncCallbackPriority

  """
  associated authorization policies
  """
  authorization_policies: [AuthorizationPolicy!]

  """
  liquid code to be invoked after persisting input to DB. If possible, use async callback actions instead
  """
  callback_actions: String

  """
  whitelist of attributes which can be persisted in the DB. On server side
  (callbacks, emails etc) you have access to submited values via form variable
  (for exapmple configuration: properties: my_var is accessible via
  form.properties.my_var )
  """
  configuration: HashObject
  created_at: JSONDate!

  """
  liquid code which has to evaluate to JSON. This extends/overwrites user
  submitted input via form, before validation. Most useful to store in DB
  sensitive data which you do not want user to modify, for example
  context.current_user.id
  """
  default_payload: String

  """
  associated email notifications
  """
  email_notifications: [EmailNotification!]

  """
  Message which you want to display to user upon validation errors.Output is
  available via context.flash_alert. Liquid allowed.
  """
  flash_alert: String

  """
  Message which you want to display to user after successful form submission.
  Output is available via context.flash_notice. Liquid allowed.
  """
  flash_notice: String
  id: ID!

  """
  liquid code to evaluate to valid form html. You have access to form_builder variable and form tag.
  """
  liquid_body: String
  metadata: HashObject
  name: String!

  """
  defines the physical path of the file
  """
  physical_file_path: String

  """
  Path or URL to which user should be redirected after successful form submission. Liquid allowed.
  """
  redirect_to: String
  resource: String!

  """
  defines who can submit the form. If set to anyone, please make sure to provide authorization_policies
  """
  resource_owner: String!

  """
  associated sms notifications
  """
  sms_notifications: [SmsNotification!]

  """
  name of the strategy and configuration for them
  """
  spam_protection: HashObject
  updated_at: JSONDate!
}

type FormCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [Form!]
  total_entries: Int!
  total_pages: Int!
}

"""
Form configuration - deprecated, use Form
"""
type FormConfiguration implements AdminSharedAttributesInterface {
  """
  associated api call notifications
  """
  api_call_notifications: [ApiCallNotification!]

  """
  Same as callback, but invoked asynchronously. Recommended for performance reason.
  """
  async_callback_actions: String

  """
  Delays invoking the job by specified number of minutes. Liquid allowed -
  useful to invoke code at certain point in time, for example 1 hour before
  something etc. To calculate proper number you can use time_diff filter.
  """
  async_callback_delay: String

  """
  Defines max number of retrying attempts in case of an error. Usually you do not want to change it.
  """
  async_callback_max_attempts: Int

  """
  defines the invocaction priority, the higher the quicker timeout
  """
  async_callback_priority: AsyncCallbackPriority

  """
  associated authorization policies
  """
  authorization_policies: [AuthorizationPolicy!]

  """
  liquid code to be invoked after persisting input to DB. If possible, use async callback actions instead
  """
  callback_actions: String

  """
  whitelist of attributes which can be persisted in the DB. On server side
  (callbacks, emails etc) you have access to submited values via form variable
  (for exapmple configuration: properties: my_var is accessible via
  form.properties.my_var )
  """
  configuration: HashObject
  created_at: JSONDate!

  """
  liquid code which has to evaluate to JSON. This extends/overwrites user
  submitted input via form, before validation. Most useful to store in DB
  sensitive data which you do not want user to modify, for example
  context.current_user.id
  """
  default_payload: String

  """
  associated email notifications
  """
  email_notifications: [EmailNotification!]

  """
  Message which you want to display to user upon validation errors.Output is
  available via context.flash_alert. Liquid allowed.
  """
  flash_alert: String

  """
  Message which you want to display to user after successful form submission.
  Output is available via context.flash_notice. Liquid allowed.
  """
  flash_notice: String
  id: ID!

  """
  liquid code to evaluate to valid form html. You have access to form_builder variable and form tag.
  """
  liquid_body: String
  metadata: HashObject
  name: String!

  """
  defines the physical path of the file
  """
  physical_file_path: String

  """
  Path or URL to which user should be redirected after successful form submission. Liquid allowed.
  """
  redirect_to: String
  resource: String!

  """
  defines who can submit the form. If set to anyone, please make sure to provide authorization_policies
  """
  resource_owner: String!

  """
  associated sms notifications
  """
  sms_notifications: [SmsNotification!]

  """
  name of the strategy and configuration for them
  """
  spam_protection: HashObject
  updated_at: JSONDate!
}

type FormConfigurationCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [FormConfiguration!]
  total_entries: Int!
  total_pages: Int!
}

input FormConfigurationInputType {
  """
  Same as callback, but invoked asynchronously. Recommended for performance reason.
  """
  async_callback_actions: String

  """
  liquid code which should evaluate to float. Delays invoking the job by
  specified number of minutes. Useful to invoke code at certain point in time,
  for example 1 hour before something etc. To calculate proper number you can
  use time_diff filter.
  """
  async_callback_delay: String = "0"

  """
  Defines max number of retrying attempts in case of an error. Usually you do not want to change it.
  """
  async_callback_max_attempts: Int = 1

  """
  defines the invocaction priority, the higher the quicker timeout
  """
  async_callback_priority: AsyncCallbackPriority = default

  """
  ids of authorization policies which should be checked
  """
  authorization_policy_ids: [ID]

  """
  liquid code to be invoked after persisting input to DB. If possible, use async callback actions instead
  """
  callback_actions: String

  """
  whitelist of attributes which can be persisted in the DB. On server side
  (callbacks, emails etc) you have access to submited values via form variable
  (for exapmple configuration: properties: my_var is accessible via
  form.properties.my_var )
  """
  configuration: HashObject

  """
  liquid code which has to evaluate to JSON. This extends/overwrites user
  submitted input via form, before validation. Most useful to store in DB
  sensitive data which you do not want user to modify, for example
  context.current_user.id
  """
  default_payload: String

  """
  liquid code which should evaluate to message which you want to display to user
  upon validation errors. Output is available via context.flash_alert
  """
  flash_alert: String

  """
  liquid code which should evaluate to message which you want to display to user
  after successful form submission. Output is available via context.flash_notice
  """
  flash_notice: String

  """
  liquid code to evaluate to valid form html. You have access to form_builder variable and form tag.
  """
  liquid_body: String
  metadata: HashObject
  name: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/form_configurations/my_form_configuration
  """
  physical_file_path: String!

  """
  liquid code which should evaluate to valid path or url to which user should be
  redirected after successful form submission.
  """
  redirect_to: String
  resource: String!

  """
  defines who can submit the form. If set to anyone, please make sure to provide authorization_policies
  """
  resource_owner: String!

  """
  strategy to protect against spam attacks.
  """
  spam_protection: SpamProtectionInputType = null
}

input FormConfigurationsFilterInput {
  async_callback_actions: StringFilter
  callback_actions: StringFilter
  created_at: DateFilter
  default_payload: StringFilter
  flash_notice: StringFilter
  id: UniqIdFilter
  liquid_body: StringFilter

  """
  Filter by metadata properties
  """
  metadata: JsonbFilter
  name: StringFilter
  redirect_to: StringFilter
  resource: StringFilter
  resource_owner: StringFilter
  updated_at: DateFilter
}

input FormConfigurationsSortInput {
  created_at: StandardSort
  id: StandardSort
  metadata: [JsonbSort!]
  name: StandardSort
  updated_at: StandardSort
}

input FormInput {
  """
  Same as callback, but invoked asynchronously. Recommended for performance reason.
  """
  async_callback_actions: String

  """
  liquid code which should evaluate to float. Delays invoking the job by
  specified number of minutes. Useful to invoke code at certain point in time,
  for example 1 hour before something etc. To calculate proper number you can
  use time_diff filter.
  """
  async_callback_delay: String = "0"

  """
  Defines max number of retrying attempts in case of an error. Usually you do not want to change it.
  """
  async_callback_max_attempts: Int = 1

  """
  defines the invocaction priority, the higher the quicker timeout
  """
  async_callback_priority: AsyncCallbackPriority = default

  """
  ids of authorization policies which should be checked
  """
  authorization_policy_ids: [ID!]

  """
  liquid code to be invoked after persisting input to DB. If possible, use async callback actions instead
  """
  callback_actions: String

  """
  whitelist of attributes which can be persisted in the DB. On server side
  (callbacks, emails etc) you have access to submited values via form variable
  (for exapmple configuration: properties: my_var is accessible via
  form.properties.my_var )
  """
  configuration: HashObject

  """
  liquid code which has to evaluate to JSON. This extends/overwrites user
  submitted input via form, before validation. Most useful to store in DB
  sensitive data which you do not want user to modify, for example
  context.current_user.id
  """
  default_payload: String

  """
  liquid code which should evaluate to message which you want to display to user
  upon validation errors. Output is available via context.flash_alert
  """
  flash_alert: String

  """
  liquid code which should evaluate to message which you want to display to user
  after successful form submission. Output is available via context.flash_notice
  """
  flash_notice: String

  """
  liquid code to evaluate to valid form html. You have access to form_builder variable and form tag.
  """
  liquid_body: String
  metadata: HashObject
  name: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/forms/my_form
  """
  physical_file_path: String!

  """
  liquid code which should evaluate to valid path or url to which user should be
  redirected after successful form submission.
  """
  redirect_to: String
  resource: String!

  """
  defines who can submit the form. If set to anyone, please make sure to provide authorization_policies
  """
  resource_owner: String!

  """
  strategy to protect against spam attacks.
  """
  spam_protection: SpamProtectionInput = null
}

"""
Autogenerated return type of FormSubmit
"""
type FormSubmitPayload {
  """
  includes one of model or user, depending on which form was submitted
  """
  result: Result

  """
  validation error messages based on form fields
  """
  validation_errors: HashObject
}

input FormsFilterInput {
  async_callback_actions: StringFilter
  callback_actions: StringFilter
  created_at: DateFilter
  default_payload: StringFilter
  flash_notice: StringFilter
  id: UniqIdFilter
  liquid_body: StringFilter

  """
  Filter by metadata properties
  """
  metadata: JsonbFilter
  name: StringFilter
  redirect_to: StringFilter
  resource: StringFilter
  resource_owner: StringFilter
  updated_at: DateFilter
}

input FormsSortInput {
  created_at: StandardSort
  id: StandardSort
  metadata: [JsonbSort!]
  name: StandardSort
  updated_at: StandardSort
}

input FullTextQueryField {
  name: String
  priority: Int = 1
  profile_field: String
}

input GeoBox {
  bottom: LatDegree!
  left: LngDegree!
  right: LngDegree!
  top: LatDegree!
}

input GeoBoxTopLeftBottomRight {
  bottom_right: GeoPoint
  top_left: GeoPoint
}

input GeoBoxTopRightBottomLeft {
  bottom_left: GeoPoint
  top_right: GeoPoint
}

input GeoPoint {
  lat: LatDegree!
  lng: LngDegree!
}

input GeoPointInShape {
  point: GeoPoint
}

type GeoPointType {
  lat: Float
  lon: Float
}

input GeoPolygon {
  """
  Remember to keep right order, follow GeoJSON spec
  """
  points: [GeoPoint]
}

input GeoPropertyFilterInput {
  """
  GeoJSON Object: of type Point, MultiPoint, LineString, Polygon. example: `{
  type: "Point", coordinates: [-84.3, 39.8] }`. Read documentation for more
  """
  center: GeometryJSON

  """
  distance in km
  """
  distance_in_km: Int
}

input GeoQuery {
  box: GeoBox
  box_top_left_bottom_right: GeoBoxTopLeftBottomRight
  box_top_right_bottom_left: GeoBoxTopRightBottomLeft
  point_in_shape: GeoPointInShape
  polygon: GeoPolygon
  radius: GeoRadius
}

input GeoRadius {
  center: GeoPoint

  """
  ex. 1km, 100mi, 50yards, 2meters
  """
  distance: String!
}

"""
GeometryJSON is a JSON format for encoding a variety of geographic data
structures. It supports the following geometry types: Point [long, lan],
LineString [[long, lan], [long, lan]], Polygon [[[long, lan], [long, lan]]] and
MultiPoint [[long, lan], [long, lan]]. Point example:  {"type": "Point",
"coordinates": [100.0, 0.0]}, Polygon exaple: {"type": "Polygon", "coordinates":
[[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]]]}. More
information: https://tools.ietf.org/html/rfc7946
"""
scalar GeometryJSON

type GraphQuery implements AdminSharedAttributesInterface {
  created_at: JSONDate!
  id: ID!
  metadata: HashObject

  """
  Name of the graph query
  """
  name: String!

  """
  defines the physical path of the file
  """
  physical_file_path: String

  """
  The query
  """
  query_string: String!
  updated_at: JSONDate!
}

type GraphQueryCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [GraphQuery!]
  total_entries: Int!
  total_pages: Int!
}

input GraphqlFilterInput {
  created_at: DateFilter
  id: UniqIdFilter

  """
  Filter by metadata properties
  """
  metadata: JsonbFilter
  name: StringFilter
  query_string: StringFilter
  updated_at: DateFilter
}

input GraphqlSortInput {
  created_at: StandardSort
  id: StandardSort
  metadata: [JsonbSort!]
  name: StandardSort
  updated_at: StandardSort
}

type HTTPRequestContext {
  """
  Returns array of configured authentication providers
  """
  authentication_providers: [AuthenticationProvider]
  body: String

  """
  Returns a String with the last requested path including their params. /foo?bar
  """
  current_full_path: String!
  current_path: String!

  """
  Returns the original request URL as a String. # => "http://www.example.com/articles?page=2"
  """
  current_url: String!
  flash: FlashMessages
  form_authenticity_token: String!

  """
  Access request headers
  """
  headers: HeadersObject!

  """
  Returns true if the “X-Requested-With” header contains “XMLHttpRequest” (case-insensitive),
  which may need to be manually added depending on the choice of JavaScript libraries and frameworks.
  """
  is_xhr: Boolean

  """
  Access data sent in by the user or other parameters in your controller actions
  """
  params: ParamsObject!
  params_unfiltered: HashObject!

  """
  The referer of the client
  """
  referer: String
}

interface HasModelsInterface {
  """
  Defines has-one relation with other model, e.g: children: models(model_name:
  "child" join_on_property: "parent_id" foreign_property: "parent_id") { id }
  """
  model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_name
    """
    model_name: [String]!
  ): Model @deprecated(reason: "use `related_model`")

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_name
    """
    model_name: [String]!
  ): [Model!] @deprecated(reason: "use `nested_models`")

  """
  Defines has-one relation with other model; ex: children: models(model_name:
  "child" join_on_property: "parent_id" foreign_property: "parent_id") { id }
  """
  related_model(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_schema_name
    """
    model_schema_name: [String]!
  ): Model

  """
  Defines has-many relation with other model; ex: children:
  related_models(model_schema_name: "child", join_on_property: "parent_id",
  foreign_property: "parent_id") { id }
  """
  related_models(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_schema_name
    """
    model_schema_name: [String]!
  ): [Model!]

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  related_user(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    """
    join_on_property: String = "user_id"
  ): User

  """
  Defines has-many relation with other user; ex: children:
  users(join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  related_users(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!
  ): [User!]

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  user(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    """
    join_on_property: String = "user_id"
  ): User @deprecated(reason: "use `nested_user`")

  """
  Defines has-many relation with other user; ex: children:
  users(join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  users(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!
  ): [User!] @deprecated(reason: "use `nested_users`")
}

"""
Represents data as a collection of unique keys and their values. Also known as
associative arrays, maps or dictionaries. You can create it in liquid by
converting JSON object with parse_json filter or tag. It can be any level deep.
"""
scalar HashObject

"""
Represents data defined by platformOS stored in context.headers variable.
"""
scalar HeadersObject

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Generic image
"""
type Image {
  filename: String! @deprecated(reason: "Not used in direct s3 way of uploading file")
  id: ID

  """
  image original height
  """
  image_original_height: Int! @deprecated(reason: "Not used in direct s3 way of uploading file")

  """
  image original width
  """
  image_original_width: Int! @deprecated(reason: "Not used in direct s3 way of uploading file")
  name: String @deprecated(reason: "Not needed")

  """
  id of the User who uploaded the image
  """
  uploader_id: ID

  """
  image url; ex: thumb: url(version: "thumb")
  """
  url(
    """
    name of the image version to which url will point
    """
    version: String
  ): String!

  """
  object with versions, ex. "urls": { "big": { "url":
  "https://uploads.example.com/images/big_photo.jpg"}, "small": { "url":
  "https://example.com/images/small_photo.jpg" } } }
  """
  urls: HashObject!
}

scalar ImageBlur

enum ImageFormat {
  jpeg
  png
  webp
}

input ImageInputType {
  """
  external url to the image
  """
  direct_url: String

  """
  Image URL returned by directly uploading it to platformOS s3 bucket using pre-signed URL
  """
  image: String

  """
  name of the property
  """
  name: String!

  """
  external url to the image
  """
  remote_image_url: String
}

input ImagePresignUrlInput {
  """
  file size limitation in KiB. ex. [gte: 1, lte: 1024] allows file size from 1KiB to 1 MiB 
  """
  content_length: ContentLengthRange

  """
  choose property which should be used to generate versions, versions defined in yml schema file
  """
  model_property: ModelPropertyInput

  """
  choose property which should be used to generate versions, versions defined in yml schema file
  """
  user_property: UserPropertyInput

  """
  deprecated
  """
  versions: [VersionInput!]
}

type ImagePresignedUploadUrl {
  """
  Direct s3 upload endpoint to which you can upload files. Make sure you include upload_url_payload with the request
  """
  upload_url: String!

  """
  Payload you need to provide for upload_url
  """
  upload_url_payload: HashObject!
}

"""
Defines the quality of the image, 0 - lowest quality, 100 - highest quality
"""
scalar ImageQuality

enum ImageResizeFit {
  """
  Embed within both provided dimensions.
  """
  contain

  """
  Crop to cover both provided dimensions
  """
  cover

  """
  Ignore the aspect ratio of the input and stretch to both provided dimensions.
  """
  fill

  """
  Preserving aspect ratio, resize the image to be as large as possible while
  ensuring its dimensions are less than or equal to both those specified.
  """
  inside

  """
  Preserving aspect ratio, resize the image to be as small as possible while
  ensuring its dimensions are greater than or equal to both those specified.
  Some of these values are based on the object-fit CSS property.
  """
  outside
}

enum ImageResizePosition {
  bottom
  center
  left
  left_bottom
  left_top
  right
  right_bottom
  right_top
  top
}

input ImagesFilterInput {
  created_at: DateFilter
  deleted_at: DateFilter
  id: UniqIdFilter
  name: StringFilter
  property_id: UniqIdFilter
  updated_at: DateFilter
  uploader_id: UniqIdFilter
}

input ImagesImport {
  """
  direct path to file on S3
  """
  direct_path: String

  """
  ID will ignored.
  """
  id: ID

  """
  name of the defined property
  """
  name: String!

  """
  URL to presigned slot on S3
  """
  url: String
}

input ImagesSortInput {
  created_at: StandardSort
  deleted_at: StandardSort
  id: StandardSort
  property_id: StandardSort
  updated_at: StandardSort
  uploader_id: StandardSort
}

"""
Autogenerated return type of ImportCustomizationsMutation
"""
type ImportCustomizationsMutationPayload {
  external_ids: [ID!]!
  ids: [ID!]!
}

"""
Autogenerated return type of ImportTransactablesMutation
"""
type ImportTransactablesMutationPayload {
  external_ids: [ID!]!
  ids: [ID!]!
}

"""
Autogenerated return type of ImportUsersMutation
"""
type ImportUsersMutationPayload {
  external_ids: [ID!]!
  ids: [ID!]!
}

"""
Instance
"""
type Instance {
  id: Int!
  name: String!
}

"""
Represents Date and time data expressed according to ISO 8601 format to which values are automatically converted.
"""
scalar JSONDate

"""
Represents data structures formatted as JSON standard.
"""
scalar JSONPayload

input JoinModelCollection {
  foreign_property: PropertyName!
  join_on_property: PropertyName = "id"
}

input JsonbAttributeFilter {
  contains: String
  key: String!
  value: Any
  value_array: [String!]
  value_boolean: Boolean
  value_float: Float
  value_int: Int
}

input JsonbFilter {
  """
  Filter by attribute key and value. Works for one level attributes
  """
  attribute: JsonbAttributeFilter

  """
  Filter by attributes - key and value. Works for one level attribute
  """
  attributes: [JsonbAttributeFilter!]

  """
  Filter metadata that contains part of the text
  """
  contains: String

  """
  Exclude matched resources from results
  """
  exclude: Boolean

  """
  Filter resources that have certain key in metadata
  """
  has_key: String
}

input JsonbSort {
  """
  name of the first level metadata attribute
  """
  name: String!
  order: SortOrderEnum!
}

"""
Must be within range -90.0..90.0
"""
scalar LatDegree

interface LegacyCustomAttributeInterface {
  """
  Fetch address by name; ex: address: custom_address(name: "office_address")
  """
  custom_address(name: String!): CustomAddrress @deprecated(reason: "Use address")

  """
  Fetch all addresses, optionaly you can filter results by name; ex: home: custom_addresses(name: "home")
  """
  custom_addresses(name: String): [CustomAddrress!] @deprecated(reason: "Use addresses")

  """
  Fetch attachment by name; ex: sales_report: custom_attachment(name: "sales_report")
  """
  custom_attachment(name: String!): PrivateFile @deprecated(reason: "Use attachment")

  """
  Fetch all attachments, optionally you can filter results by name; ex:
  sales_reports: custom_attachments(name: "sales_report")
  """
  custom_attachments(name: String): [PrivateFile!] @deprecated(reason: "Use attachments")

  """
  Fetch image by name; ex: header: custom_image(name: "header")
  """
  custom_image(name: String!): Image @deprecated(reason: "Use image")

  """
  Fetch all images, optionaly you can filter results by name; ex: cat_images: custom_images(name: "cat")
  """
  custom_images(name: String): [Image!] @deprecated(reason: "Use images")
}

"""
Liquid Layouts
"""
type LiquidLayout implements AdminSharedAttributesInterface {
  """
  liquid code to evaluate to valid html. To inject content of the resources using the layout use {{ content_for_layout }}
  """
  body: String
  created_at: JSONDate!
  format: PageFormat
  id: ID!
  metadata: HashObject

  """
  defines the the path for layout, must starts with layouts/, for example layouts/my_layout
  """
  path: String!

  """
  defines the physical path of the file
  """
  physical_file_path: String
  updated_at: JSONDate!
}

type LiquidLayoutCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [LiquidLayout!]
  total_entries: Int!
  total_pages: Int!
}

input LiquidLayoutInputType {
  body: String
  format: PageFormat = html
  metadata: HashObject
  path: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/views/layouts/my_layout
  """
  physical_file_path: String
}

input LiquidLayoutsFilterInput {
  body: StringFilter
  created_at: DateFilter
  id: UniqIdFilter

  """
  Filter by metadata properties
  """
  metadata: JsonbFilter
  path: StringFilter
  updated_at: DateFilter
}

input LiquidLayoutsSortInput {
  created_at: StandardSort
  id: StandardSort
  metadata: [JsonbSort!]
  path: StandardSort
  updated_at: StandardSort
}

"""
Liquid Partials
"""
type LiquidPartial implements AdminSharedAttributesInterface {
  """
  liquid code to evaluate to valid html
  """
  body: String
  created_at: JSONDate!
  format: PageFormat
  id: ID!
  metadata: HashObject

  """
  defines the name of the partial to be used with include tag
  """
  path: String!

  """
  defines the physical path of the file
  """
  physical_file_path: String
  updated_at: JSONDate!
}

type LiquidPartialCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [LiquidPartial!]
  total_entries: Int!
  total_pages: Int!
}

input LiquidPartialInputType {
  body: String
  format: PageFormat = html
  metadata: HashObject
  path: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/views/partials/my_partial
  """
  physical_file_path: String
}

input LiquidPartialsFilterInput {
  body: StringFilter
  created_at: DateFilter
  id: UniqIdFilter

  """
  Filter by metadata properties
  """
  metadata: JsonbFilter
  path: StringFilter
  updated_at: DateFilter
}

input LiquidPartialsSortInput {
  created_at: StandardSort
  id: StandardSort
  metadata: [JsonbSort!]
  path: StandardSort
  updated_at: StandardSort
}

type Listing implements ListingCustomAttributeInterface & ListingsMetadata & RelationOnDemandInterface & RemoteModelInterface {
  created_at: JSONDate

  """
  Remember to set `listing: { has_creator: true }` in query arguments
  """
  creator: UserListing
  creator_id: ID

  """
  Fetch address by name; ex: address: custom_address(name: "office_address")
  """
  custom_address(name: String!): ListingAddress

  """
  Fetch all addresses, optionaly you can filter results by name; ex: home: custom_addresses(name: "home")
  """
  custom_addresses(name: String): [ListingAddress!]

  """
  Fetch attachment by name; ex: sales_report: custom_attachment(name: "sales_report")
  """
  custom_attachment(name: String!): ListingsPrivateFile
  custom_attachments(name: String): [ListingsPrivateFile!]

  """
  Fetch image by name; ex: header: custom_image(name: "header")
  """
  custom_image(name: String!): ListingImage

  """
  Fetch all images, optionaly you can filter results by name; ex: cat_images: custom_images(name: "cat")
  """
  custom_images(name: String): [ListingImage!]
  customizations(name: String, properties: [QueryCustomAttribute], user_id: ID): [ListingsCustomization!]
  deleted_at: JSONDate
  external_id: ID
  id: ID!

  """
  Defines belongs-to relation with other model; ex: parent: model(model_name:
  "parent", join_on_property: "parent_id") { id }
  """
  model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_name: String
  ): ListingsCustomization @deprecated(reason: "use `related_model`")

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_name: [String]
  ): [ListingsCustomization!] @deprecated(reason: "use `related_models`")
  name: String

  """
  List of all properties assigned to the object.
  """
  properties: HashObject

  """
  Fetch any custom attribute by name; ex: hair_color: property(name: "hair_color")
  """
  property(name: String!): String

  """
  Fetch any property of Array type by name, it returns Array in contrast to
  "property" which returns String; ex: todo_list: property_array(name: "todo_list")
  """
  property_array(name: String!): [String!]

  """
  Fetch any property of JSON type by name, it returns JSON in contrast to
  "property" which returns String; ex: todo_list: property_json(name: "todo_list")
  """
  property_json(name: String!): JSONPayload

  """
  Defines belongs-to relation with other model; ex: parent: model(model_name:
  "parent", join_on_property: "parent_id") { id }
  """
  related_model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_schema_name: String
  ): ListingsCustomization

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  related_models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_schema_name: [String]
  ): [ListingsCustomization!]

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  related_user(foreign_property: String = "id", join_on_property: String = "user_id"): User

  """
  Defines relation object accessible over HTTP in JSON collection identified by it's ID.
  """
  remote_model(
    """
    Endpoint that will return resources for given ids in json format
    """
    endpoint: Endpoint!

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String!
  ): Customization
  slug: String!

  """
  when sorting by distance - field contains distance to target location
  """
  sort_score: [Int] @deprecated(reason: "not supported everywhere")
  type: String
  updated_at: JSONDate

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  user(foreign_property: String = "id", join_on_property: String = "user_id"): User @deprecated(reason: "use `related_users`")
}

"""
An address
"""
type ListingAddress {
  address: String
  address2: String
  apartment: String
  city: String
  country: String
  id: Int!
  iso_country_code: String
  lat: Float
  lng: Float
  name: String
  point: GeoPointType
  postcode: String
  service_radius: String
  state: String
  street: String
  street_number: String
  suburb: String
}

input ListingAggregation {
  fields: [AggregationField]
  filter: QueryListing
  global: Boolean = false

  """
  Name of the result
  """
  name: String
}

type ListingCollection {
  aggregations: Aggregations!
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  page: Int! @deprecated(reason: "use current_page")
  per_page: Int!
  results: [Listing!]
  size: Int!
  total_entries: Int!
  total_pages: Int!
}

interface ListingCustomAttributeInterface {
  """
  Fetch address by name; ex: address: custom_address(name: "office_address")
  """
  custom_address(name: String!): ListingAddress

  """
  Fetch all addresses, optionaly you can filter results by name; ex: home: custom_addresses(name: "home")
  """
  custom_addresses(name: String): [ListingAddress!]

  """
  Fetch attachment by name; ex: sales_report: custom_attachment(name: "sales_report")
  """
  custom_attachment(name: String!): ListingsPrivateFile
  custom_attachments(name: String): [ListingsPrivateFile!]

  """
  Fetch image by name; ex: header: custom_image(name: "header")
  """
  custom_image(name: String!): ListingImage

  """
  Fetch all images, optionaly you can filter results by name; ex: cat_images: custom_images(name: "cat")
  """
  custom_images(name: String): [ListingImage!]

  """
  List of all properties assigned to the object.
  """
  properties: HashObject

  """
  Fetch any custom attribute by name; ex: hair_color: property(name: "hair_color")
  """
  property(name: String!): String

  """
  Fetch any property of Array type by name, it returns Array in contrast to
  "property" which returns String; ex: todo_list: property_array(name: "todo_list")
  """
  property_array(name: String!): [String!]

  """
  Fetch any property of JSON type by name, it returns JSON in contrast to
  "property" which returns String; ex: todo_list: property_json(name: "todo_list")
  """
  property_json(name: String!): JSONPayload
}

type ListingImage {
  file_name: String
  filename: String @deprecated(reason: "Use file_name")
  id: ID
  image_original_height: Int
  image_original_width: Int
  name: String

  """
  image url; ex: thumb: url(version: "thumb")
  """
  url(version: String = "thumb"): String
}

"""
A profile
"""
type ListingUserProfile implements ListingCustomAttributeInterface & RelationOnDemandInterface & RemoteModelInterface {
  """
  Fetch address by name; ex: address: custom_address(name: "office_address")
  """
  custom_address(name: String!): ListingAddress

  """
  Fetch all addresses, optionaly you can filter results by name; ex: home: custom_addresses(name: "home")
  """
  custom_addresses(name: String): [ListingAddress!]

  """
  Fetch attachment by name; ex: sales_report: custom_attachment(name: "sales_report")
  """
  custom_attachment(name: String!): ListingsPrivateFile
  custom_attachments(name: String): [ListingsPrivateFile!]

  """
  Fetch image by name; ex: header: custom_image(name: "header")
  """
  custom_image(name: String!): ListingImage

  """
  Fetch all images, optionaly you can filter results by name; ex: cat_images: custom_images(name: "cat")
  """
  custom_images(name: String): [ListingImage!]
  customizations(name: String!, user_id: ID): [ListingsCustomization!]
  external_id: ID
  id: ID!

  """
  Defines belongs-to relation with other model; ex: parent: model(model_name:
  "parent", join_on_property: "parent_id") { id }
  """
  model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_name: String
  ): ListingsCustomization @deprecated(reason: "use `related_model`")

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_name: [String]
  ): [ListingsCustomization!] @deprecated(reason: "use `related_models`")
  profile_type: String!

  """
  List of all properties assigned to the object.
  """
  properties: HashObject

  """
  Fetch any custom attribute by name; ex: hair_color: property(name: "hair_color")
  """
  property(name: String!): String

  """
  Fetch any property of Array type by name, it returns Array in contrast to
  "property" which returns String; ex: todo_list: property_array(name: "todo_list")
  """
  property_array(name: String!): [String!]

  """
  Fetch any property of JSON type by name, it returns JSON in contrast to
  "property" which returns String; ex: todo_list: property_json(name: "todo_list")
  """
  property_json(name: String!): JSONPayload

  """
  Defines belongs-to relation with other model; ex: parent: model(model_name:
  "parent", join_on_property: "parent_id") { id }
  """
  related_model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_schema_name: String
  ): ListingsCustomization

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  related_models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_schema_name: [String]
  ): [ListingsCustomization!]

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  related_user(foreign_property: String = "id", join_on_property: String = "user_id"): User

  """
  Defines relation object accessible over HTTP in JSON collection identified by it's ID.
  """
  remote_model(
    """
    Endpoint that will return resources for given ids in json format
    """
    endpoint: Endpoint!

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String!
  ): Customization

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  user(foreign_property: String = "id", join_on_property: String = "user_id"): User @deprecated(reason: "use `related_users`")
}

"""
Deprecated
"""
type ListingsCommunication {
  phone_number: String!
  verified: Boolean!
}

type ListingsCustomModelType {
  id: ID!
  name: String!
}

type ListingsCustomization implements ListingCustomAttributeInterface & RelationOnDemandInterface & RemoteModelInterface {
  """
  timestamp of when the record was created, automatically generated by the system
  """
  created_at: JSONDate

  """
  Fetch address by name; ex: address: custom_address(name: "office_address")
  """
  custom_address(name: String!): ListingAddress

  """
  Fetch all addresses, optionaly you can filter results by name; ex: home: custom_addresses(name: "home")
  """
  custom_addresses(name: String): [ListingAddress!]

  """
  Fetch attachment by name; ex: sales_report: custom_attachment(name: "sales_report")
  """
  custom_attachment(name: String!): ListingsPrivateFile
  custom_attachments(name: String): [ListingsPrivateFile!]

  """
  Fetch image by name; ex: header: custom_image(name: "header")
  """
  custom_image(name: String!): ListingImage

  """
  Fetch all images, optionaly you can filter results by name; ex: cat_images: custom_images(name: "cat")
  """
  custom_images(name: String): [ListingImage!]
  custom_model_type: ListingsCustomModelType
  customizable: Customizable
  customizable_id: ID
  customizable_type: String
  customizations(filter: NestedCustomizationFilters, page: Int = 1, per_page: Int = 20, sort: [CustomizationsSortOrder]): ListingsCustomizationCollection! @deprecated(reason: "Use models: instead.")
  deleted_at: JSONDate

  """
  Used mainly for import/export, if you want to use third party service as a source of truth
  """
  external_id: ID
  human_name: String
  id: ID!

  """
  Defines belongs-to relation with other model; ex: parent: model(model_name:
  "parent", join_on_property: "parent_id") { id }
  """
  model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_name: String
  ): ListingsCustomization @deprecated(reason: "use `related_model`")
  model_schema: ListingsModelSchema

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_name: [String]
  ): [ListingsCustomization!] @deprecated(reason: "use `related_models`")
  name: String
  payment: Payment

  """
  List of all properties assigned to the object.
  """
  properties: HashObject

  """
  Fetch any custom attribute by name; ex: hair_color: property(name: "hair_color")
  """
  property(name: String!): String

  """
  Fetch any property of Array type by name, it returns Array in contrast to
  "property" which returns String; ex: todo_list: property_array(name: "todo_list")
  """
  property_array(name: String!): [String!]

  """
  Fetch any property of JSON type by name, it returns JSON in contrast to
  "property" which returns String; ex: todo_list: property_json(name: "todo_list")
  """
  property_json(name: String!): JSONPayload

  """
  Defines belongs-to relation with other model; ex: parent: model(model_name:
  "parent", join_on_property: "parent_id") { id }
  """
  related_model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_schema_name: String
  ): ListingsCustomization

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  related_models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_schema_name: [String]
  ): [ListingsCustomization!]

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  related_user(foreign_property: String = "id", join_on_property: String = "user_id"): User

  """
  Defines relation object accessible over HTTP in JSON collection identified by it's ID.
  """
  remote_model(
    """
    Endpoint that will return resources for given ids in json format
    """
    endpoint: Endpoint!

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String!
  ): Customization
  updated_at: JSONDate

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  user(foreign_property: String = "id", join_on_property: String = "user_id"): User @deprecated(reason: "use `related_users`")
  user_id: ID
}

type ListingsCustomizationCollection {
  aggregations: Aggregations!
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  page: Int! @deprecated(reason: "use current_page")
  per_page: Int!
  results: [ListingsCustomization!]
  size: Int!
  total_entries: Int!
  total_pages: Int!
}

interface ListingsMetadata {
  """
  when sorting by distance - field contains distance to target location
  """
  sort_score: [Int] @deprecated(reason: "not supported everywhere")
}

type ListingsModelSchema {
  id: ID!
  name: String!
}

type ListingsPrivateFile {
  content_type: String
  created_at: JSONDate
  file_name: String
  id: ID
  name: String
  size_bytes: Int
  url(
    """
    Number of seconds before presigned URL expires. Max value is one week (604800)
    """
    expires_in: Int = 900
  ): String
}

"""
Must be within range -180.0..180.0
"""
scalar LngDegree

type LogEntry {
  id: ID!
  message: String!
  type: String!
}

"""
List of available event types
"""
enum LogEntryType {
  debug
  error
  info
}

type MerchantAccount {
  account_type: String!
  attachments: [PrivateFile]
  bank_account_number: String!
  created_at: JSONDate
  date_of_birth: String!

  """
  Reference to object in external Payment Gateway
  """
  external_id: String
  first_name: String!
  id: ID
  last_name: String!
  merchantable_id: ID
  merchantable_type: String
  payment_gateway: PaymentGateway

  """
  Returns actual Stripe subaccount balance
  """
  payment_gateway_balance: PaymentGatewayBalance
  state: MerchantAccountState
}

type MerchantAccountCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [MerchantAccount!]
  total_entries: Int!
  total_pages: Int!
}

"""
List of states for merchant account
"""
enum MerchantAccountState {
  """
  Failed merchant account
  """
  failed

  """
  Pending merchant account
  """
  pending

  """
  Verified merchant account
  """
  verified

  """
  Voided merchant account
  """
  voided
}

type Model implements HasModelsInterface & PropertiesInterface {
  """
  Fetch address by name; ex: address: address(name: "office_address")
  """
  address(name: String!): CustomAddrress

  """
  Fetch all addresses, optionally you can filter results by name; ex: home_address: addresses(name: "home")
  """
  addresses(name: String): [CustomAddrress!]

  """
  Fetch attachment by name; ex: sales_report: attachment(name: "sales_report")
  """
  attachment(name: String!): PrivateFile

  """
  Fetch all attachments, optionally you can filter results by name; ex: sales_reports: attachments(name: "sales_report")
  """
  attachments(name: String): [PrivateFile!]

  """
  timestamp of when the record was created, automatically generated by the system
  """
  created_at: JSONDate!
  customizable_id: ID @deprecated(reason: "Use property to store foreign keys")
  customizable_type: String @deprecated(reason: "Use property to store foreign keys")

  """
  timestamp of when the record was soft delete, populated by delete action. It
  is also possible to manually set it via update. To undelete change it back to
  empty value, but please note that associated records would need to be manually
  undeleted as well.
  """
  deleted_at: JSONDate

  """
  Used mainly for import/export, if you want to use third party service as a source of truth
  """
  external_id: ID

  """
  ID of an object.
  """
  id: ID

  """
  Fetch image by name; ex: header: image(name: "header")
  """
  image(name: String!): Image

  """
  Fetch all images, optionally you can filter results by name; ex: cat_images: images(name: "cat")
  """
  images(name: String): [Image!]

  """
  Defines has-one relation with other model, e.g: children: models(model_name:
  "child" join_on_property: "parent_id" foreign_property: "parent_id") { id }
  """
  model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_name
    """
    model_name: [String]!
  ): Model @deprecated(reason: "use `related_model`")

  """
  ID of Model Schema to which it belongs
  """
  model_schema_id: ID!

  """
  Name of the model schema to which it belongs
  """
  model_schema_name: String

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_name
    """
    model_name: [String]!
  ): [Model!] @deprecated(reason: "use `nested_models`")

  """
  Name of the model schema
  """
  name: String @deprecated(reason: "use model_schema_name")

  """
  List of all properties assigned to the object.
  """
  properties: HashObject

  """
  Fetch any property by name and return value as a String; ex: hair_color: property(name: "hair_color")
  """
  property(name: String!): String

  """
  Fetch any property by name and return value as an Array of Strings. ex: todo_list: property_array(name: "todo_list")
  """
  property_array(name: String!): [String!]

  """
  Fetch any property by name and return value as a Boolean; ex: price: property_boolean(name: "enabled")
  """
  property_boolean(name: String!): Boolean

  """
  Fetch any property by name and return value as a Float; ex: price: property_float(name: "price")
  """
  property_float(name: String!): Float

  """
  Fetch any property by name and return value as an Integer; ex: age: property_int(name: "age")
  """
  property_int(name: String!): Int

  """
  Fetch any property by name and return value as a JSON.
  """
  property_json(name: String!): JSONPayload

  """
  Defines has-one relation with other model; ex: children: models(model_name:
  "child" join_on_property: "parent_id" foreign_property: "parent_id") { id }
  """
  related_model(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_schema_name
    """
    model_schema_name: [String]!
  ): Model

  """
  Defines has-many relation with other model; ex: children:
  related_models(model_schema_name: "child", join_on_property: "parent_id",
  foreign_property: "parent_id") { id }
  """
  related_models(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_schema_name
    """
    model_schema_name: [String]!
  ): [Model!]

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  related_user(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    """
    join_on_property: String = "user_id"
  ): User

  """
  Defines has-many relation with other user; ex: children:
  users(join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  related_users(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!
  ): [User!]

  """
  timestamp of when the record was updated, automatically generated by the system
  """
  updated_at: JSONDate!

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  user(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    """
    join_on_property: String = "user_id"
  ): User @deprecated(reason: "use `nested_user`")

  """
  Id of the User who created and owns the Model
  """
  user_id: ID

  """
  Defines has-many relation with other user; ex: children:
  users(join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  users(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!
  ): [User!] @deprecated(reason: "use `nested_users`")
}

type ModelCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [Model!]
  total_entries: Int!
  total_pages: Int!
}

input ModelPropertyInput {
  model_schema_name: String!
  property_name: String!
}

"""
Schema for model (old CustomModelType)
"""
type ModelSchema implements AdminPropertiesInterface & AdminSharedAttributesInterface {
  created_at: JSONDate!

  """
  Deprecated, use properties instead.
  """
  fields: [Property!]! @deprecated(reason: "Use properties")
  id: ID!
  metadata: HashObject
  name: String!
  parameterized_name: String!

  """
  defines the physical path of the file
  """
  physical_file_path: String

  """
  List of properties attributes to be included in the results
  """
  properties: [Property!]!
  updated_at: JSONDate!
}

type ModelSchemaCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [ModelSchema!]
  total_entries: Int!
  total_pages: Int!
}

input ModelSchemaInputType {
  """
  deprecated, use properties
  """
  fields: [NestedPropertyInputType]
  metadata: HashObject
  name: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/custom_model_types/my_model
  """
  physical_file_path: String!
  properties: [NestedPropertyInputType]
}

input ModelSchemasFilterInput {
  created_at: DateFilter
  id: UniqIdFilter

  """
  Filter by metadata properties
  """
  metadata: JsonbFilter
  name: StringFilter
  parameterized_name: StringFilter
  updated_at: DateFilter
}

input ModelSchemasSortInput {
  created_at: StandardSort
  id: StandardSort
  metadata: [JsonbSort!]
  name: StandardSort
  parameterized_name: StandardSort
  updated_at: StandardSort
}

input ModelUpdate {
  addresses: [AddressImport!]
  attachments: [AttachmentsImport!]
  created_at: ISO8601DateTime
  customizable_id: ID
  customizable_type: CustomizableTypeEnum

  """
  ID must match existing object id
  """
  id: ID!
  images: [ImagesImport!]

  """
  ex. {"color": "red"}
  """
  properties: HashObject
  type_name: String!
  updated_at: ISO8601DateTime
  user_id: ID
}

input ModelsFilterInput {
  created_at: DateFilter
  deleted_at: DateFilter
  external_id: StringFilter
  id: UniqIdFilter
  model_schema_id: UniqIdFilter
  model_schema_name: StringFilter

  """
  deprecated, use `related_models`
  """
  models: [RelatedModelsFilterInput!]

  """
  Deprecated, use model_schema_name
  """
  name: StringFilter

  """
  join arguments with OR operator
  """
  or: [ModelsFilterInput!]
  properties: [PropertyFilterInput!]

  """
  filter by related models
  """
  related_models: [RelatedModelsFilterInput!]
  related_users: [RelatedUsersFilterInput!]
  updated_at: DateFilter
  user_id: UniqIdFilter

  """
  deprecated, use `related_users`
  """
  users: [RelatedUsersFilterInput!]
}

input ModelsSortInput {
  created_at: StandardSort
  deleted_at: StandardSort
  external_id: StandardSort
  id: StandardSort
  model_schema_id: StandardSort
  properties: [PropertySort!]
  updated_at: StandardSort
}

input NestedCustomizationFilters {
  created_at: DateRange
  id: ID
  ids: [ID]
  ignore_deleted: Boolean = true
  is_deleted: Boolean

  """
  Name of the Model Schema
  """
  name: String
  properties: [QueryCustomAttribute]
  user_id: ID
  user_ids: [ID]
}

input NestedPropertyInputType {
  """
  1 if property is meant to be removed, 0 otherwise
  """
  _destroy: String

  """
  Type of the property
  """
  attribute_type: PropertyTypeEnum

  """
  Defines a relationship with other model schema or the user schema. Used during importing/exporting data.
  """
  belongs_to: String

  """
  Default value for new objects
  """
  default_value: String

  """
  id of the property to update
  """
  id: ID
  metadata: HashObject

  """
  Name of the property
  """
  name: String!
}

input NewCustomImageInputType {
  custom_attribute_name: String!

  """
  URL to image that was uploaded to s3 presigned url
  """
  direct_url: String
  owner_id: ID!

  """
  valid values: Customization, User, UserProfile
  """
  owner_type: String!

  """
  deprecated
  """
  page_slug: String

  """
  deprecated, use direct_url which is generated via image_presign_url mutation
  """
  raw_remote_image_url: String
  uploader_id: ID
}

"""
Autogenerated return type of NotificationSendEmail
"""
type NotificationSendEmailPayload {
  errors: [BaseError!]!
  is_scheduled_to_send: Boolean!
}

input NotificationTemplateInput {
  """
  Name of the template
  """
  name: String!
}

type ObjectCount {
  count: Int!
}

enum OperatorEnum {
  """
  all values should match
  """
  AND

  """
  any value should match
  """
  OR
}

"""
Order direction
"""
enum OrderDirection {
  """
  Asc
  """
  ASC

  """
  Desc
  """
  DESC
}

"""
Page
"""
type Page implements AdminSharedAttributesInterface {
  """
  associated authorization policies
  """
  authorization_policies: [AuthorizationPolicy!]
  content: String

  """
  specfic timestamp of when the content was updated last time, useful for cache
  """
  content_updated_at: JSONDate!
  created_at: JSONDate!

  """
  the number of seconds for which this page will be cached; set
  dynamic_cache_layout accordingly to your scenario. Triggers authorization. Use
  only if cache_key cannot be easily determined (for example for search results page)
  """
  dynamic_cache_expire: Int

  """
  liquid which evaluates to the cache key, for example {{ context.page.slug
  }}/{{ context.params.slug2 }}for page with slug "abc" will cache separately
  /abc/1 and /abc/2, however abc/1/1 will return the same value as abc/1/2. If
  left blank, the full url will be used.
  """
  dynamic_cache_key: String

  """
  defines whether layout should be cached as well, or only page. Usually it is
  not possible to cache layout due to dynamic data in it, like name of a logged
  in user, hence default is false.
  """
  dynamic_cache_layout: Boolean
  format: PageFormat
  handler: PageRequestMethod
  id: ID!
  layout_name: String

  """
  max nesting of the url to be resolved by this slug. For example slug "abc"
  with max_deep_level 2 will resolve /abc, abc/1, abc/2, but will NOT resolve
  abc/2/something.
  """
  max_deep_level: Int
  metadata: HashObject

  """
  defines the physical path of the file
  """
  physical_file_path: String
  redirect_code: Int
  redirect_to: String
  request_method: PageRequestMethod
  response_headers: HashObject
  searchable: Boolean
  slug: String!

  """
  the number of seconds for which this page will be cached as a static html
  page; works only for not logged in users, skips any authorization
  """
  static_cache_expire: Int
  updated_at: JSONDate!
}

type PageCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [Page!]
  total_entries: Int!
  total_pages: Int!
}

input PageFilterInput {
  """
  Search for text in rendered page content. Page must be marked as searchable
  """
  content: StringFilter
  content_updated_at: DateFilter
  created_at: DateFilter

  """
  Filter by format, ex. format: { value: HTML }
  """
  format: PageFormatFilter
  id: UniqIdFilter
  layout_name: StringFilter

  """
  Filter by metadata properties
  """
  metadata: JsonbFilter
  searchable: BooleanFilter

  """
  Filter by slug. Enter slug without leading /, ex. slug: { exact: "client/orders" }
  """
  slug: StringFilter
  updated_at: DateFilter
}

enum PageFormat {
  """
  css
  """
  css

  """
  csv
  """
  csv

  """
  html
  """
  html

  """
  js
  """
  js

  """
  json
  """
  json

  """
  pdf
  """
  pdf

  """
  rss
  """
  rss

  """
  svg
  """
  svg

  """
  text
  """
  text

  """
  txt
  """
  txt

  """
  xml
  """
  xml
}

input PageFormatFilter {
  not_value: PageFormat
  not_value_in: [PageFormat!]
  value: PageFormat
  value_in: [PageFormat!]
}

enum PageHandler {
  """
  liquid
  """
  liquid

  """
  markdown
  """
  markdown
}

input PageInputType {
  """
  ids of authorization policies which should be checked
  """
  authorization_policy_ids: [ID]
  content: String
  dynamic_cache_expire: Int = 3
  dynamic_cache_key: String
  dynamic_cache_layout: Boolean = false
  format: PageFormat = html
  handler: PageHandler = liquid
  layout_name: String

  """
  max nesting of the url to be resolved by this slug. For example slug "abc"
  with max_deep_level 2 will resolve /abc, abc/1, abc/2, but will NOT resolve
  abc/2/something.
  """
  max_deep_level: Int = 3
  metadata: HashObject

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/views/pages/my-page
  """
  physical_file_path: String!
  redirect_code: PageRedifectCode
  redirect_to: String
  request_method: PageRequestMethod = get
  response_headers: HashObject
  searchable: Boolean = false
  slug: String!
  static_cache_expire: Int = 3
}

enum PageRedifectCode {
  """
  301 Moved Permanently
  """
  MOVED_PERMANENTLY

  """
  302 Moved Temporarily
  """
  MOVED_TEMPORARILY
}

enum PageRequestMethod {
  """
  delete
  """
  delete

  """
  get
  """
  get

  """
  options
  """
  options

  """
  patch
  """
  patch

  """
  post
  """
  post

  """
  put
  """
  put
}

input PagesSortInput {
  created_at: StandardSort
  id: StandardSort
  metadata: [JsonbSort!]
  slug: StandardSort
  updated_at: StandardSort
}

"""
Represents data defined by platformOS stored in context.params variable.
"""
scalar ParamsObject

type Payment {
  additional_tax_price: Float!
  additional_tax_price_cents: Float!
  created_at: JSONDate
  currency: String!
  direct_charge: Boolean
  external_id: String
  failed_at: JSONDate
  id: ID
  included_tax_price: Float!
  included_tax_price_cents: Float!
  merchant_account: MerchantAccount
  paid_at: JSONDate
  payable_id: Int!
  payable_type: String!
  payer: User!
  payment_gateway: PaymentGateway
  payment_gateway_fee_cents: Float!
  payment_method: PaymentMethod
  payment_transfers: [PaymentTransfer!]
  receiver: User!
  refunds: [Refund!]
  service_fee_payer: Float!
  service_fee_receiver: Float!
  state: PaymentState
  subtotal_amount: Float!
  total_amount: Float!
  total_amount_cents: Float!

  """
  Amount that can be transferred to receiver
  """
  transferable_amount: Float

  """
  Amount cents that can be transferred to receiver
  """
  transferable_amount_cents: Float
}

input PaymentAmountInputType {
  currency: String!
  service_fee_payer: Float
  service_fee_receiver: Float
  subtotal_amount: Float
  total_amount: Float
}

type PaymentCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [Payment!]
  total_entries: Int!
  total_pages: Int!
}

type PaymentGateway {
  current_mode_publishable_key: String
  id: ID!
  live_active: Boolean
  live_publishable_key: String
  payment_methods(payment_method_type: [PaymentMethodType]): [PaymentMethod]
  test_active: Boolean
  test_publishable_key: String
  type: String
}

type PaymentGatewayBalance {
  available: [PaymentGatewayBalanceEntry]
  id: ID!
  pending: [PaymentGatewayBalanceEntry]
}

type PaymentGatewayBalanceEntry {
  amount: Int
  currency: String
  source_types: HashObject
}

"""
List modes of Payment Gateway
"""
enum PaymentGatewayMode {
  """
  Uses live account, all transactions are charged
  """
  live

  """
  Uses test account, no transactons are actually charged
  """
  test
}

"""
List of available types of Payment Gatweways
"""
enum PaymentGatewayType {
  BraintreeMarketplacePaymentGateway
  BraintreePaymentGateway
  ManualPaymentGateway
  PaypalExpressChainPaymentGateway
  PaypalExpressPaymentGateway
  PaypalPaymentGateway
  StripeConnectPaymentGateway
  StripePaymentGateway
}

input PaymentInputType {
  amount: PaymentAmountInputType!
  bank_account_id: ID
  credit_card_id: ID
  credit_card_token: String
  direct_charge: Boolean
  paid_at: String
  payable_id: ID
  payable_type: String
  payer_id: ID!
  payment_method_id: ID
  receiver_id: ID
}

type PaymentMethod {
  active: Boolean
  environment: String
  id: ID!
  key: String
  payment_gateway: PaymentGateway
  payment_method_type: PaymentMethodType!
}

"""
List of available types of Payment Methods
"""
enum PaymentMethodType {
  ach
  credit_card
  express_checkout
  free
  manual
  nonce
  remote
}

"""
List of available modes for Payment
"""
enum PaymentMode {
  """
  Live mode
  """
  live

  """
  Test mode
  """
  test
}

type PaymentMutationResult {
  errors: HashObject
  result: Payment
  success: Boolean
}

"""
List of available states for Payment
"""
enum PaymentState {
  """
  Authorized payment
  """
  authorized

  """
  Failed payment
  """
  failed

  """
  Payment has been made
  """
  paid

  """
  Pending payment
  """
  pending

  """
  Payment has been refunded
  """
  refunded

  """
  Voided payment
  """
  voided
}

type PaymentTransfer {
  amount: Float!
  amount_cents: Float!
  created_at: JSONDate
  currency: String!
  failed_at: JSONDate
  gateway_response: String
  id: ID
  payment_gateway_fee_cents: Float!
  payments: [Payment]
  payout_attempts: [PayoutAttempt]
  receiver: User
  service_fee_amount_guest: Float
  service_fee_amount_guest_cents: Int
  service_fee_amount_host: Float
  service_fee_amount_host_cents: Int
  token: String
  transferred_at: JSONDate
}

input PaymentTransferAmountInputType {
  currency: String!
  transfer_amount: Float!
}

type PaymentTransferCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [PaymentTransfer!]
  total_entries: Int!
  total_pages: Int!
}

input PaymentTransferFilters {
  created_at: DateRange
  external_id: String
  id: ID
  payment_gateway_id: ID
  receiver_id: ID
  transferred_at: DateRange
}

input PaymentTransferInputType {
  amount: PaymentTransferAmountInputType
  failed_at: String
  payment_ids: [ID]
  transferred_at: String
}

type PaymentTransferMutationResult {
  errors: HashObject
  result: PaymentTransfer
  success: Boolean
}

input PaymentTransferSort {
  """
  Sort by given field value
  """
  field: String!
  order: OrderDirection = DESC
}

type PayoutAttempt {
  amount: Float
  amount_cents: Int
  created_at: JSONDate
  failed: Boolean
  failure_message: String
  gateway_response: String
  id: ID!
  pending: Boolean
  success: Boolean
}

input PresignUrlInput {
  """
  defines whether it is a public file that anyone who knows the url can access
  it, or if its private and even with the known URL it is not possible to see
  the file without a signature.
  """
  acl: ACL = public
  content_disposition: String = "inline"

  """
  file size limitation in KiB. ex. [gte: 1, lte: 1024] allows file size from 1KiB to 1 MiB 
  """
  content_length: ContentLengthRange
  type: UploadType = image

  """
  if image is uploaded, multiple versions of it will be generated automatically
  """
  versions: [VersionInput!]
}

type PresignedUploadUrl {
  """
  Direct s3 upload endpoint to which you can upload files. Make sure you include upload_url_payload with the request
  """
  upload_url: String!

  """
  Payload you need to provide for upload_url
  """
  upload_url_payload: HashObject!
}

type PresignedUrl {
  """
  URL to CDN with your file. Will be available once you upload file
  """
  access_url: String!
  path: String!

  """
  Presigned URL where you should upload file
  """
  upload_url: String!
}

type PrivateFile {
  content_type: String
  created_at: JSONDate
  file_name: String
  id: ID
  name: String
  size_bytes: Int
  url(
    """
    Number of seconds before presigned URL expires. Max value is one week (604800)
    """
    expires_in: Int = 900
  ): String
}

input ProcessPageInputType {
  """
  Parameters you would like to pass to the page to render it dynamically. They will beavailable via context.params. 
  """
  params: HashObject

  """
  Slug of the page which you would like to use as a template
  """
  slug: String!
}

enum ProcessStrategy {
  """
  pdf - body should be html to be converted to pdf
  """
  pdf

  """
  text - choose it for things like csv, json, xml, plain text etc.
  """
  text
}

input ProcessStrategyInputType {
  """
  Expected content depends on strategy, however usually it is text, html, csv,
  json, xml etc.Alternativey you can process page via page argument.
  """
  body: String

  """
  Name of the output file
  """
  file_name: String!

  """
  Provided page will be rendered and its output will be used as a body.
  Alternatively you can pass body directly via body argument
  """
  page: ProcessPageInputType
  strategy: ProcessStrategy!

  """
  if you set to true and strategy requires asynchronous processing by us (like
  pdf generation) then the mutation will wait until the file is actually
  generated so you can for example attach it to an email
  """
  synchronous: Boolean = false
}

"""
A profile
"""
type Profile implements HasModelsInterface & LegacyCustomAttributeInterface & PropertiesInterface & RemoteModelInterface {
  """
  Fetch address by name; ex: address: address(name: "office_address")
  """
  address(name: String!): CustomAddrress

  """
  Fetch all addresses, optionally you can filter results by name; ex: home_address: addresses(name: "home")
  """
  addresses(name: String): [CustomAddrress!]

  """
  Fetch attachment by name; ex: sales_report: attachment(name: "sales_report")
  """
  attachment(name: String!): PrivateFile

  """
  Fetch all attachments, optionally you can filter results by name; ex: sales_reports: attachments(name: "sales_report")
  """
  attachments(name: String): [PrivateFile!]

  """
  Fetch address by name; ex: address: custom_address(name: "office_address")
  """
  custom_address(name: String!): CustomAddrress @deprecated(reason: "Use address")

  """
  Fetch all addresses, optionaly you can filter results by name; ex: home: custom_addresses(name: "home")
  """
  custom_addresses(name: String): [CustomAddrress!] @deprecated(reason: "Use addresses")

  """
  Fetch attachment by name; ex: sales_report: custom_attachment(name: "sales_report")
  """
  custom_attachment(name: String!): PrivateFile @deprecated(reason: "Use attachment")

  """
  Fetch all attachments, optionally you can filter results by name; ex:
  sales_reports: custom_attachments(name: "sales_report")
  """
  custom_attachments(name: String): [PrivateFile!] @deprecated(reason: "Use attachments")

  """
  Fetch image by name; ex: header: custom_image(name: "header")
  """
  custom_image(name: String!): Image @deprecated(reason: "Use image")

  """
  Fetch all images, optionaly you can filter results by name; ex: cat_images: custom_images(name: "cat")
  """
  custom_images(name: String): [Image!] @deprecated(reason: "Use images")
  customizations(customizable_id: ID, customizable_type: String, id: [ID], name: String, properties: [QueryCustomAttribute], sort: [CustomizationSortOrder], user_id: ID): [Customization!]

  """
  ID of an object.
  """
  id: ID

  """
  Fetch image by name; ex: header: image(name: "header")
  """
  image(name: String!): Image

  """
  Fetch all images, optionally you can filter results by name; ex: cat_images: images(name: "cat")
  """
  images(name: String): [Image!]

  """
  Defines has-one relation with other model, e.g: children: models(model_name:
  "child" join_on_property: "parent_id" foreign_property: "parent_id") { id }
  """
  model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_name
    """
    model_name: [String]!
  ): Model @deprecated(reason: "use `related_model`")

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_name
    """
    model_name: [String]!
  ): [Model!] @deprecated(reason: "use `nested_models`")
  profile_type: String!

  """
  List of all properties assigned to the object.
  """
  properties: HashObject

  """
  Fetch any property by name and return value as a String; ex: hair_color: property(name: "hair_color")
  """
  property(name: String!): String

  """
  Fetch any property by name and return value as an Array of Strings. ex: todo_list: property_array(name: "todo_list")
  """
  property_array(name: String!): [String!]

  """
  Fetch any property by name and return value as a Boolean; ex: price: property_boolean(name: "enabled")
  """
  property_boolean(name: String!): Boolean

  """
  Fetch any property by name and return value as a Float; ex: price: property_float(name: "price")
  """
  property_float(name: String!): Float

  """
  Fetch any property by name and return value as an Integer; ex: age: property_int(name: "age")
  """
  property_int(name: String!): Int

  """
  Fetch any property by name and return value as a JSON.
  """
  property_json(name: String!): JSONPayload

  """
  Defines has-one relation with other model; ex: children: models(model_name:
  "child" join_on_property: "parent_id" foreign_property: "parent_id") { id }
  """
  related_model(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_schema_name
    """
    model_schema_name: [String]!
  ): Model

  """
  Defines has-many relation with other model; ex: children:
  related_models(model_schema_name: "child", join_on_property: "parent_id",
  foreign_property: "parent_id") { id }
  """
  related_models(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_schema_name
    """
    model_schema_name: [String]!
  ): [Model!]

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  related_user(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    """
    join_on_property: String = "user_id"
  ): User

  """
  Defines has-many relation with other user; ex: children:
  users(join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  related_users(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!
  ): [User!]

  """
  Defines relation object accessible over HTTP in JSON collection identified by it's ID.
  """
  remote_model(
    """
    Endpoint that will return resources for given ids in json format
    """
    endpoint: Endpoint!

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String!
  ): Customization

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  user(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    """
    join_on_property: String = "user_id"
  ): User @deprecated(reason: "use `nested_user`")

  """
  Defines has-many relation with other user; ex: children:
  users(join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  users(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!
  ): [User!] @deprecated(reason: "use `nested_users`")
}

input ProfileFilterInput {
  """
  Name of the user profile type
  """
  name: String
  properties: [PropertyFilterInput!]
}

interface PropertiesInterface {
  """
  Fetch address by name; ex: address: address(name: "office_address")
  """
  address(name: String!): CustomAddrress

  """
  Fetch all addresses, optionally you can filter results by name; ex: home_address: addresses(name: "home")
  """
  addresses(name: String): [CustomAddrress!]

  """
  Fetch attachment by name; ex: sales_report: attachment(name: "sales_report")
  """
  attachment(name: String!): PrivateFile

  """
  Fetch all attachments, optionally you can filter results by name; ex: sales_reports: attachments(name: "sales_report")
  """
  attachments(name: String): [PrivateFile!]

  """
  ID of an object.
  """
  id: ID

  """
  Fetch image by name; ex: header: image(name: "header")
  """
  image(name: String!): Image

  """
  Fetch all images, optionally you can filter results by name; ex: cat_images: images(name: "cat")
  """
  images(name: String): [Image!]

  """
  List of all properties assigned to the object.
  """
  properties: HashObject

  """
  Fetch any property by name and return value as a String; ex: hair_color: property(name: "hair_color")
  """
  property(name: String!): String

  """
  Fetch any property by name and return value as an Array of Strings. ex: todo_list: property_array(name: "todo_list")
  """
  property_array(name: String!): [String!]

  """
  Fetch any property by name and return value as a Boolean; ex: price: property_boolean(name: "enabled")
  """
  property_boolean(name: String!): Boolean

  """
  Fetch any property by name and return value as a Float; ex: price: property_float(name: "price")
  """
  property_float(name: String!): Float

  """
  Fetch any property by name and return value as an Integer; ex: age: property_int(name: "age")
  """
  property_int(name: String!): Int

  """
  Fetch any property by name and return value as a JSON.
  """
  property_json(name: String!): JSONPayload
}

"""
Property definition
"""
type Property implements AdminSharedAttributesInterface {
  """
  Type of the property
  """
  attribute_type: PropertyTypeEnum

  """
  Defines a relationship with other model schema or the user schema. Used during importing/exporting data.
  """
  belongs_to: String
  created_at: JSONDate!

  """
  Default value for new objects
  """
  default_value: String
  id: ID!
  metadata: HashObject

  """
  Name of the property
  """
  name: String!

  """
  defines the physical path of the file
  """
  physical_file_path: String

  """
  Id of the schema to which this property definition belongs
  """
  target_id: ID!

  """
  Type of the schema to which this property definition belongs
  """
  target_type: String!
  updated_at: JSONDate!
}

input PropertyFilterInput {
  contains: String

  """
  select items for which a distance between its point from <:property> and <:center> point is less than <:distance>.
  """
  distance_sphere: GeoPropertyFilterInput
  ends_with: String
  exists: Boolean

  """
  name of the property
  """
  name: String!
  not_contains: String
  not_ends_with: String
  not_starts_with: String
  not_value: String
  not_value_in: [String!]
  range: RangeFilter
  starts_with: String
  value: String
  value_boolean: Boolean
  value_float: Float

  """
  Property should match one of the provided arguments
  """
  value_in: [String!]
  value_int: Int
}

"""
Model Property Name
"""
scalar PropertyName

input PropertySort {
  name: String!
  order: SortOrderEnum!
}

enum PropertyTypeEnum {
  """
  address
  """
  address

  """
  array of strings, will be deprecated in the future as current implementation prevents arrays of other types
  """
  array

  """
  binary
  """
  binary

  """
  boolean
  """
  boolean

  """
  date
  """
  date

  """
  datetime
  """
  datetime

  """
  decimal
  """
  decimal

  """
  file
  """
  file

  """
  float
  """
  float

  """
  geojson
  """
  geojson

  """
  integer
  """
  integer

  """
  photo
  """
  photo

  """
  string
  """
  string

  """
  deprecated, please use string
  """
  text

  """
  time
  """
  time
}

input Query {
  fields: [FullTextQueryField]

  """
  Accept wildcards, ? for single character, * for more
  """
  keyword: String
  match_type: QueryMatchTypeEnum = EXACT
  operator: OperatorEnum = AND
}

input QueryCustomAttribute {
  """
  Set it when you want to exclude value/values/range from results
  """
  exclude: Boolean = false
  exists: Boolean
  name: String!
  range: Range
  value: String
  values: [String]
  values_operator: OperatorEnum = OR
}

input QueryCustomModelType {
  id: Int
  ids: [Int]
  name: String
  names: [String]
}

input QueryCustomization {
  addresses: [QueryListingLocation]
  id: ID
  name: String
  parameterized_name: String

  """
  Need to narrow profiles by profile_type
  """
  properties: [QueryCustomAttribute]
  user_id: ID
}

input QueryListing {
  addresses: [QueryListingLocation]
  created_at: DateRange
  creator: QueryUser
  creator_id: ID
  creator_ids: [ID]
  custom_attributes: [QueryCustomAttribute]
  customizations: [QueryCustomization]
  external_id: ID
  external_ids: [ID]
  has_creator: Boolean
  id: ID
  ids: [ID]
  is_deleted: Boolean
  name: String
  properties: [QueryCustomAttribute]
  slug: String
  transactable_type: QueryTransactableType

  """
  do not use this please
  """
  without_ids: [ID]
}

input QueryListingLocation {
  cities: [String]
  city: String
  country: String
  exists: Boolean

  """
  Geo search
  """
  geo_query: GeoQuery
  postcode: String
  state: String
  street: String
  suburb: String
}

"""
Match types for keyword
"""
enum QueryMatchTypeEnum {
  """
  Match any characters on start and end *foo*
  """
  CONTAINS

  """
  Match any characters on start *foo
  """
  ENDS_WITH

  """
  Match whole words
  """
  EXACT

  """
  Match any characters on end foo*
  """
  STARTS_WITH
}

input QueryModelSchema {
  id: Int
  ids: [Int]
  name: String
  names: [String]
}

input QueryTransactableType {
  id: Int
  ids: [Int]
  name: String
  names: [String]
}

input QueryUser {
  created_at: DateRange
  customizations: [QueryCustomization]
  email: String
  emails: [String]
  external_id: ID
  externals_id: [ID]
  first_name: String
  id: ID
  ids: [ID]
  is_deleted: Boolean = false
  last_name: String
  middle_name: String
  name: String
  profiles: [QueryUserProfile]
  slug: String
  without_ids: [ID]
}

input QueryUserProfile {
  addresses: [QueryListingLocation]
  custom_attributes: [QueryCustomAttribute]
  customizations: [QueryCustomization]

  """
  Geo search based on searchable custom_addresses
  """
  geo_query: GeoQuery
  is_deleted: Boolean

  """
  Name of the user profile type
  """
  name: String

  """
  Alias for name argument
  """
  profile_type: String

  """
  Need to narrow profiles by profile_type
  """
  properties: [QueryCustomAttribute]
}

input Range {
  gt: String
  gte: String
  lt: String
  lte: String
}

input RangeFilter {
  gt: String
  gte: String
  lt: String
  lte: String
}

type Refund {
  amount: Float
  amount_cents: Int
  created_at: JSONDate
  id: ID!
  payment: Payment
  payment_gateway: PaymentGateway
  response: String
}

input RefundPaymentInputType {
  amount_cents: Int
}

input RelatedModelsFilterInput {
  filter: ModelsFilterInput
  join: JoinModelCollection
}

input RelatedUsersFilterInput {
  filter: UsersFilterInput
  join: JoinModelCollection
}

interface RelationOnDemandInterface {
  """
  Defines belongs-to relation with other model; ex: parent: model(model_name:
  "parent", join_on_property: "parent_id") { id }
  """
  model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_name: String
  ): ListingsCustomization @deprecated(reason: "use `related_model`")

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_name: [String]
  ): [ListingsCustomization!] @deprecated(reason: "use `related_models`")

  """
  Defines belongs-to relation with other model; ex: parent: model(model_name:
  "parent", join_on_property: "parent_id") { id }
  """
  related_model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_schema_name: String
  ): ListingsCustomization

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  related_models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_schema_name: [String]
  ): [ListingsCustomization!]

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  related_user(foreign_property: String = "id", join_on_property: String = "user_id"): User

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  user(foreign_property: String = "id", join_on_property: String = "user_id"): User @deprecated(reason: "use `related_users`")
}

interface RemoteModelInterface {
  """
  Defines relation object accessible over HTTP in JSON collection identified by it's ID.
  """
  remote_model(
    """
    Endpoint that will return resources for given ids in json format
    """
    endpoint: Endpoint!

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String!
  ): Customization
}

type Response {
  body: String

  """
  Hash of headers returned by the server
  """
  headers: HashObject

  """
  Standard HTTP status code
  """
  status: Int!
}

type Result {
  """
  hash with calculated difference of what has changed
  """
  changes: HashObject

  """
  Updated model, assuming submited form was for resource model
  """
  model: Model

  """
  Create/Updated transactable, assuming submitted form was for resource Transactable
  """
  transactable: Transactable @deprecated(reason: "use model")

  """
  Updated user, assuming submited form was for resource User
  """
  user: User
}

type RootMutation {
  """
  Creates an Activity
  """
  activity_create(payload: ActivityStreamsPayload!): ActivityStreamsActivity

  """
  Delete all activities and clean up ALL feeds
  """
  activity_delete_all(confirm: Boolean = false): [ID]

  """
  add activity to feeds
  """
  activity_publish(
    """
    e.i. User, UserPrivate, AuditLog, Images, Posts
    """
    feed_type: String!
    ids: [ID]!
    uuid: ID!
  ): JSONDate

  """
  Clean up feeds from selected activities
  """
  activity_unpublish(
    """
    search for activities related to the Object and then cleanup all feeds from found activities
    """
    related_to_object: ActiveRecordReference

    """
    remove from feeds activity with UUID
    """
    uuid: ID
  ): [ID]

  """
  Clean up ALL feeds
  """
  activity_unpublish_all(confirm: Boolean = false): [ID]

  """
  Creates api call notification
  """
  admin_api_call_notification_create(api_call_notification: ApiCallNotificationInputType!): ApiCallNotification

  """
  Creates api call notification
  """
  admin_api_call_notification_delete(id: ID!): ApiCallNotification

  """
  Creates api call notification
  """
  admin_api_call_notification_update(api_call_notification: UpdateApiCallNotificationInputType!, id: ID!): ApiCallNotification

  """
  Creates asset
  """
  admin_assets_create(assets: [AssetInput!]!): AssetsCreateMutationPayload

  """
  Presign assets urls for given path
  """
  admin_assets_presign_urls(paths: [AssetPresignInput!]!): AssetsPresignUrlsMutationPayload

  """
  Creates authorization policy
  """
  admin_authorization_policy_create(authorization_policy: AuthorizationPolicyInputType!): AuthorizationPolicy

  """
  Creates authorization policy
  """
  admin_authorization_policy_delete(id: ID!): AuthorizationPolicy

  """
  Creates authorization policy
  """
  admin_authorization_policy_update(authorization_policy: UpdateAuthorizationPolicyInputType!, id: ID!): AuthorizationPolicy

  """
  Creates email_notification schema
  """
  admin_email_notification_create(email_notification: EmailNotificationInputType!): EmailNotification

  """
  Creates email_notification schema
  """
  admin_email_notification_delete(id: ID!): EmailNotification

  """
  Creates email_notification schema
  """
  admin_email_notification_update(email_notification: UpdateEmailNotificationInputType!, id: ID!): EmailNotification

  """
  Creates field
  """
  admin_field_create(field: StandalonePropertyInputType!): Property @deprecated(reason: "Use admin_property_create")

  """
  Creates field
  """
  admin_field_delete(id: ID!): Property @deprecated(reason: "Use admin_property_delete")

  """
  Creates field
  """
  admin_field_update(field: UpdateStandalonePropertyInputType!, id: ID!): Property @deprecated(reason: "Use admin_property_update")

  """
  Creates form_configuration schema
  """
  admin_form_configuration_create(form_configuration: FormConfigurationInputType!): FormConfiguration @deprecated(reason: "Use admin_form_create")

  """
  Creates form_configuration schema
  """
  admin_form_configuration_delete(id: ID!): FormConfiguration @deprecated(reason: "Use admin_form_delete")

  """
  Creates form_configuration schema
  """
  admin_form_configuration_update(form_configuration: UpdateFormConfigurationInputType!, id: ID!): FormConfiguration @deprecated(reason: "Use admin_form_update")

  """
  Creates form
  """
  admin_form_create(form: FormInput!): Form

  """
  Delete form
  """
  admin_form_delete(id: ID!): Form

  """
  Update form
  """
  admin_form_update(form: UpdateFormInput!, id: ID!): Form

  """
  Creates liquid layout
  """
  admin_liquid_layout_create(liquid_layout: LiquidLayoutInputType!): LiquidLayout

  """
  Creates liquid layout
  """
  admin_liquid_layout_delete(id: ID!): LiquidLayout

  """
  Creates liquid layout
  """
  admin_liquid_layout_update(id: ID!, liquid_layout: UpdateLiquidLayoutInputType!): LiquidLayout

  """
  Creates liquid partial
  """
  admin_liquid_partial_create(liquid_partial: LiquidPartialInputType!): LiquidPartial

  """
  Creates liquid partial
  """
  admin_liquid_partial_delete(id: ID!): LiquidPartial

  """
  Creates liquid partial
  """
  admin_liquid_partial_update(id: ID!, liquid_partial: UpdateLiquidPartialInputType!): LiquidPartial

  """
  Creates model schema
  """
  admin_model_schema_create(model_schema: ModelSchemaInputType!): ModelSchema

  """
  Creates model schema
  """
  admin_model_schema_delete(id: ID!): ModelSchema

  """
  Creates model schema
  """
  admin_model_schema_update(id: ID!, model_schema: UpdateModelSchemaInputType!): ModelSchema

  """
  Creates page
  """
  admin_page_create(page: PageInputType!): Page

  """
  Creates page
  """
  admin_page_delete(id: ID!): Page

  """
  Creates page
  """
  admin_page_update(id: ID!, page: UpdatePageInputType!): Page

  """
  Creates property
  """
  admin_property_create(property: StandalonePropertyInputType!): Property

  """
  Creates property
  """
  admin_property_delete(id: ID!): Property

  """
  Creates property
  """
  admin_property_update(id: ID!, property: UpdateStandalonePropertyInputType!): Property

  """
  Creates sms_notification schema
  """
  admin_sms_notification_create(sms_notification: SmsNotificationInputType!): SmsNotification

  """
  Creates sms_notification schema
  """
  admin_sms_notification_delete(id: ID!): SmsNotification

  """
  Creates sms_notification schema
  """
  admin_sms_notification_update(id: ID!, sms_notification: UpdateSmsNotificationInputType!): SmsNotification

  """
  Creates transactable schema
  """
  admin_transactable_schema_create(transactable_schema: TransactableSchemaInputType!): TransactableSchema

  """
  Creates transactable schema
  """
  admin_transactable_schema_delete(id: ID!): TransactableSchema

  """
  Creates transactable schema
  """
  admin_transactable_schema_update(id: ID!, transactable_schema: UpdateTransactableSchemaInputType!): TransactableSchema

  """
  Creates user_profile schema
  """
  admin_user_profile_schema_create(user_profile_schema: UserProfileSchemaInputType!): UserProfileSchema

  """
  Creates user_profile schema
  """
  admin_user_profile_schema_delete(id: ID!): UserProfileSchema

  """
  Creates user_profile schema
  """
  admin_user_profile_schema_update(id: ID!, user_profile_schema: UpdateUserProfileSchemaInputType!): UserProfileSchema
  api_call_send(
    """
    Variables that will be accesible in liquid
    """
    data: HashObject

    """
    Template defined in app/notifications/api_call_notifications
    """
    template: NotificationTemplateInput
  ): ApiCallSendPayload

  """
  Presign upload url for direct s3 upload
  """
  attachment_presign_url(options: AttachmentPresignUrlInput): AttachmentPresignedUploadUrl!

  """
  Creates credit card
  """
  bank_account_create(bank_account: BankAccountInputType!, form_configuration_name: String!): BankAccount

  """
  destroys credit card
  """
  bank_account_delete(form_configuration_name: String!, id: ID!): BankAccount
  constant_set(
    """
    Name of the constant you want to set
    """
    name: String!

    """
    Value of the constant, which will be securely store
    """
    value: String!
  ): EncryptedConstant!
  constant_unset(
    """
    Name of the constant you want to unset
    """
    name: String!
  ): EncryptedConstant

  """
  Creates credit card
  """
  credit_card_create(credit_card: CreditCardInputType!, form_configuration_name: String!): CreditCard

  """
  destroys credit card
  """
  credit_card_delete(form_configuration_name: String!, id: ID!): CreditCard

  """
  Creates a CustomAttachment
  """
  custom_attachment_create(
    custom_attachment: CustomAttachmentInputType!

    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
  ): CustomAttachment

  """
  Remove a custom attachment
  """
  custom_attachment_delete(
    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
    id: ID!
  ): CustomAttachment

  """
  Updates a CustomAttachment
  """
  custom_attachment_update(
    custom_attachment: UpdateCustomAttachmentInputType!

    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
    id: ID!
  ): CustomAttachment

  """
  Creates a CustomImage
  """
  custom_image_create(
    custom_image: NewCustomImageInputType!

    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
  ): CustomImage

  """
  Remove a custom image
  """
  custom_image_delete(
    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
    id: ID!
  ): CustomImage

  """
  Updates a CustomImage
  """
  custom_image_update(
    custom_image: CustomImageInputType!

    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
    id: ID!
  ): CustomImage
  customization_create(
    customization: CustomizationInputType

    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
    model: CustomizationInputType
  ): Customization!

  """
  Remove a customization
  """
  customization_delete(
    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
    id: ID!
  ): Customization! @deprecated(reason: "use model_delete")

  """
  Updates a customization
  """
  customization_update(
    customization: CustomizationInputType

    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
    id: ID!
    model: CustomizationInputType
  ): Customization!

  """
  Remove all models, beware there is no comming back!
  """
  customizations_delete_all(
    """
    Deprecated, use all_model_schemas
    """
    all_custom_model_types: Boolean

    """
    Mark this if you really want to remove all models
    """
    all_model_schemas: Boolean

    """
    Deprecated, use model_schema_name
    """
    custom_model_type_name: String
    filter: ModelsFilterInput
    model_schema_name: String
  ): ObjectCount! @deprecated(reason: "use models_delete_all")

  """
  Email will be queued to sending
  """
  email_send(
    """
    Variables that will be accesible in liquild
    """
    data: HashObject

    """
    Template defined in app/notifications/email_notifications
    """
    template: NotificationTemplateInput
  ): NotificationSendEmailPayload
  form_submit(
    """
    Values for fields defined in associated form. Might include "id" key which
    will identify the resource in case id argument is blank.
    """
    fields: HashObject!

    """
    Name of the form which should be submitted
    """
    form_name: String!

    """
    id of a resource to be updated; can also be provided as "id" key in "fields"
    hash (if both are present, this argument takes precedence).
    """
    id: ID
  ): FormSubmitPayload

  """
  Generate presigned url where you can upload image. Include image processing.
  """
  image_presign_url(options: ImagePresignUrlInput): ImagePresignedUploadUrl!
  import_models(
    """
    Remap ids, when disabled all ids needs to be an Integer
    """
    _id_remap: Boolean = true

    """
    Rebuilds index for full text search queries
    """
    _index_rebuild: Boolean = true
    models: [CustomizationImport!]!
  ): ImportCustomizationsMutationPayload
  import_transactables(
    """
    Remap ids, when disabled all ids needs to be an Integer
    """
    _id_remap: Boolean = true

    """
    Rebuilds index for full text search queries
    """
    _index_rebuild: Boolean = true
    transactables: [TransactableImport!]!
  ): ImportTransactablesMutationPayload @deprecated(reason: "use Models instead of Transactables")
  import_users(
    """
    Remap ids, when disabled all ids needs to be an Integer
    """
    _id_remap: Boolean = true

    """
    Rebuilds index for full text search queries
    """
    _index_rebuild: Boolean = true
    users: [UserImport!]!
  ): ImportUsersMutationPayload

  """
  Check JWT token and Sign In User
  """
  jwt_decode_and_set_session(jwt_token: String!): User

  """
  Creates a MarketplaceLogEntryMutation
  """
  log(message: Any!, type: LogEntryType!): LogEntry
  model_create(
    customization: CustomizationInputType

    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
    model: CustomizationInputType
  ): Model!

  """
  Remove a customization
  """
  model_delete(
    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
    id: ID!
  ): Model!

  """
  Updates a customization
  """
  model_update(
    customization: CustomizationInputType

    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
    id: ID!
    model: CustomizationInputType
  ): Model!

  """
  Remove all models, beware there is no comming back!
  """
  models_delete_all(
    """
    Deprecated, use all_model_schemas
    """
    all_custom_model_types: Boolean

    """
    Mark this if you really want to remove all models
    """
    all_model_schemas: Boolean

    """
    Deprecated, use model_schema_name
    """
    custom_model_type_name: String
    filter: ModelsFilterInput
    model_schema_name: String
  ): ObjectCount!

  """
  Update all models matching filter conditions; use only for small result set,
  for larger amount of results use import feature
  """
  models_update_all(filter: ModelsFilterInput, model: CustomizationInputType!, model_schema_name: String!): ObjectCount!

  """
  Charges payment
  """
  payment_charge(form_configuration_name: String!, id: ID!): Payment

  """
  Creates payment
  """
  payment_create(form_configuration_name: String!, payment: PaymentInputType!): PaymentMutationResult

  """
  Deletes payment
  """
  payment_delete(form_configuration_name: String!, id: ID!): Payment

  """
  Refunds payment
  """
  payment_refund(form_configuration_name: String!, id: ID!, payment: RefundPaymentInputType!): PaymentMutationResult

  """
  Creates payment transfer for payment
  """
  payment_transfer_create(form_configuration_name: String!, payment_transfer: PaymentTransferInputType!): PaymentTransferMutationResult

  """
  Payout transfer to external bank account
  """
  payment_transfer_payout(form_configuration_name: String!, id: ID!): PaymentTransferMutationResult

  """
  Process payment transfer in payment gateway
  """
  payment_transfer_process(form_configuration_name: String!, id: ID!): PaymentTransferMutationResult

  """
  Updates payment transfer
  """
  payment_transfer_update(form_configuration_name: String!, id: ID!, payment_transfer: PaymentTransferInputType!): PaymentTransferMutationResult

  """
  Updates payment
  """
  payment_update(form_configuration_name: String!, id: ID!, payment: UpdatePaymentInputType): Payment

  """
  Presign upload url for direct s3 upload
  """
  presigned_upload_url(options: PresignUrlInput): PresignedUploadUrl! @deprecated(reason: "use image_presign_url or attachment_presign_url")

  """
  Adds a field to session
  """
  session_create_field(name: String!, value: Any!): HashObject @deprecated(reason: "Use session tag")

  """
  Adds a field to session
  """
  session_delete_field(name: String!): HashObject @deprecated(reason: "Use session tag")
  transactable_create(form_configuration_name: String, transactable: TransactableInputType!): Transactable! @deprecated(reason: "use Models instead of Transactables")
  transactable_delete(form_configuration_name: String, id: ID!): Transactable! @deprecated(reason: "use Models instead of Transactables")
  transactable_update(form_configuration_name: String, id: ID!, transactable: TransactableInputType!): Transactable! @deprecated(reason: "use Models instead of Transactables")
  transactables_delete_all(
    """
    Mark this if you really want to remove all transactables
    """
    all_transactable_types: Boolean
    transactable_type_name: String
  ): ObjectCount! @deprecated(reason: "use Models instead of Transactables")
  update_models(models: [ModelUpdate!]!): UpdateCustomizationsMutationPayload
  update_users(users: [UserUpdate!]!): UpdateUsersMutationPayload

  """
  Creates user
  """
  user_create(
    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
    id: ID
    user: UserInputType!
  ): User

  """
  Deletes a user
  """
  user_delete(
    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
    id: ID!
  ): User
  user_profile_delete(
    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
    profile_type: String!
    user_id: ID!
  ): Profile!

  """
  Remove all user profiles, beware there is no comming back!
  """
  user_profiles_delete_all(
    """
    Mark this if you really want to remove all user_profiles
    """
    all_user_profile_types: Boolean
    user_profile_type_name: String
  ): ObjectCount!

  """
  Sign In User
  """
  user_session_create(
    email: String

    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
    password: String!
    remember_me: String = "1"
  ): User

  """
  Sign Out User
  """
  user_session_destroy(
    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String
  ): HashObject

  """
  Updates current_user
  """
  user_update(
    """
    deprecated, use form_name
    """
    form_configuration_name: String

    """
    name of the form which whitelist attributes which can be saved. All
    notifications and callbacks associated with the form will be triggered. if
    left blank, all attributes will be allowed
    """
    form_name: String

    """
    when not provided we try to use current_user
    """
    id: ID
    user: UserInputType!
  ): User

  """
  Remove all users, beware there is no comming back!
  """
  users_delete_all(
    """
    If filter options are not specified, this must be checked
    """
    all_users: Boolean
    filter: UsersFilterInput
  ): ObjectCount!

  """
  Update all users matching filter conditions; use only for small result set,
  for larger amount of results use import feature
  """
  users_update_all(
    """
    If filter options are not specified, this must be checked
    """
    all_users: Boolean
    filter: UsersFilterInput
    user: UserInputType!
  ): ObjectCount!
}

"""
Root query for schema
"""
type RootQuery {
  activities(ids: [ID], page: Int = 1, per_page: Int = 20, uuids: [String]): ActivityStreamsActivityCollection
  admin_api_call_notifications(filter: ApiCallNotificationsFilterInput, page: Int = 1, per_page: Int = 20, sort: [ApiCallNotificationsSortInput!]): ApiCallNotificationCollection!
  admin_assets(filter: AssetsFilterInput, page: Int = 1, per_page: Int = 20, sort: [AssetsSortInput!]): AssetCollection!
  admin_authorization_policies(filter: AuthorizationPoliciesFilterInput, page: Int = 1, per_page: Int = 20, sort: [AuthorizationPoliciesSortInput!]): AuthorizationPolicyCollection!
  admin_background_jobs(filter: BackgroundJobsFilterInput, page: Int = 1, per_page: Int = 20, sort: [BackgroundJobsSortInput!]): BackgroundJobCollection!
  admin_email_notifications(filter: EmailNotificationsFilterInput, page: Int = 1, per_page: Int = 20, sort: [EmailNotificationsSortInput!]): EmailNotificationCollection!
  admin_form_configurations(filter: FormConfigurationsFilterInput, page: Int = 1, per_page: Int = 20, sort: [FormConfigurationsSortInput!]): FormConfigurationCollection! @deprecated(reason: "use admin_forms")
  admin_forms(filter: FormsFilterInput, page: Int = 1, per_page: Int = 20, sort: [FormsSortInput!]): FormCollection!
  admin_graphql(filter: GraphqlFilterInput, page: Int = 1, per_page: Int = 20, sort: [GraphqlSortInput!]): GraphQueryCollection!
  admin_liquid_layouts(filter: LiquidLayoutsFilterInput, page: Int = 1, per_page: Int = 20, sort: [LiquidLayoutsSortInput!]): LiquidLayoutCollection!
  admin_liquid_partials(filter: LiquidPartialsFilterInput, page: Int = 1, per_page: Int = 20, sort: [LiquidPartialsSortInput!]): LiquidPartialCollection!
  admin_model_schemas(filter: ModelSchemasFilterInput, page: Int = 1, per_page: Int = 20, sort: [ModelSchemasSortInput!]): ModelSchemaCollection!
  admin_pages(
    """
    deprecated use filter: { metadata: { exclude: $exclude }}
    """
    exclude: Boolean
    filter: PageFilterInput

    """
    deprecated use filter: { metadata: { has_key: $key }}
    """
    has_key: String

    """
    deprecated use filter: { metadata: { contains: $text }}
    """
    metadata: String

    """
    deprecated use filter: { metadata: { attribute: { key: $name, value: $value }}}
    """
    name: String
    page: Int = 1
    per_page: Int = 20
    sort: [PagesSortInput!]

    """
    deprecated use filter: { metadata: { attribute: { key: $key, value: $value }}}
    """
    value: String
  ): PageCollection!
  admin_sms_notifications(filter: SmsNotificationsFilterInput, page: Int = 1, per_page: Int = 20, sort: [SmsNotificationsSortInput!]): SmsNotificationCollection!
  admin_third_party_integrations(filter: ThirdPartyIntegrationsFilterInput, page: Int = 1, per_page: Int = 20, sort: [ThirdPartyIntegrationsSortInput!]): ThirdPartyIntegrationCollection!
  admin_transactable_schemas(filter: TransactableSchemasFilterInput, page: Int = 1, per_page: Int = 20, sort: [TransactableSchemasSortInput!]): TransactableSchemaCollection!
  admin_user_profile_schemas(filter: UserProfileSchemasFilterInput, page: Int = 1, per_page: Int = 20, sort: [UserProfileSchemasSortInput!]): UserProfileSchemaCollection!
  cms_discovery(types: [CMSItemType]): CMSItemDefinitionCollection @deprecated(reason: "Use admin_* queries")
  cms_items(page: Int = 1, per_page: Int, type: CMSItemType!): CMSItemPayloadCollection @deprecated(reason: "Use admin_* queries")
  constant(filter: EncryptedConstantFilterInput): EncryptedConstant @deprecated(reason: "Use constants")
  constants(filter: EncryptedConstantsFilterInput, page: Int = 1, per_page: Int = 20, sort: [EncryptedConstantsSortInput!]): EncryptedConstantCollection!
  credit_cards(id: ID, payment_method_id: ID, user_id: ID): [CreditCard]! @deprecated(reason: "Use our official payments module")
  current_user: User
  custom_attribute_definition(name: String!): CustomAttributeDefinition @deprecated(reason: "Use admin_* queries")
  customization(id: ID, name: String): Customization @deprecated(reason: "Use models instead.")
  customizations(
    aggregations: [ListingAggregation]
    created_at: DateRange

    """
    deprecated: use model_schema
    """
    custom_model_type: QueryCustomModelType
    customizable_id: ID
    customizable_ids: [ID]
    customizable_type: String
    external_id: ID
    external_ids: [ID]
    id: ID
    ids: [ID]
    is_deleted: Boolean = false
    model_schema: QueryModelSchema

    """
    Name of the Model Schema
    """
    name: String

    """
    Array of names of the Model Schema
    """
    names: [String]
    page: Int = 1
    per_page: Int = 20
    properties: [QueryCustomAttribute]

    """
    Fulltext search
    """
    query: Query
    sort: [SortOrder]
    updated_at: DateRange
    user_id: ID
    user_ids: [ID]

    """
    Array of ids to exclude from results
    """
    without_ids: [ID]

    """
    Array of names of the Model Schema which will be excluded from results
    """
    without_names: [String]
  ): ListingsCustomizationCollection! @deprecated(reason: "Use models instead")
  feeds: [ActivityStreamsFeed]
  handlers(page: Int = 1, per_page: Int = 20): ActivityStreamsHandlerCollection
  images(filter: ImagesFilterInput, page: Int = 1, per_page: Int!, sort: [ImagesSortInput!]): CustomImageCollection!
  instance: Instance @deprecated(reason: "Not needed")
  listings(
    aggregations: [ListingAggregation]

    """
    Geo search Deprecetad
    """
    geo_query: GeoQuery
    listing: QueryListing
    page: Int = 1
    per_page: Int = 20

    """
    Fulltext search
    """
    query: Query
    sort: [SortOrder]
  ): ListingCollection! @deprecated(reason: "Use Model instead of Transactables")
  login_providers: [String] @deprecated(reason: "Not needed")
  merchant_accounts(created_at: DateRange, page: Int = 1, payment_gateway_id: ID, per_page: Int = 25, state: [MerchantAccountState], test: Boolean): MerchantAccountCollection @deprecated(reason: "Use our official payments module")
  model(id: ID, name: String): Customization @deprecated(reason: "Use models instead")
  models(filter: ModelsFilterInput, page: Int = 1, per_page: Int!, sort: [ModelsSortInput!]): ModelCollection!
  pages(
    """
    deprecated use filter: { metadata: { exclude: $exclude }}
    """
    exclude: Boolean
    filter: PageFilterInput

    """
    deprecated use filter: { metadata: { has_key: $key }}
    """
    has_key: String

    """
    deprecated use filter: { metadata: { contains: $text }}
    """
    metadata: String

    """
    deprecated use filter: { metadata: { attribute: { key: $name, value: $value }}}
    """
    name: String
    page: Int = 1
    per_page: Int = 20
    sort: [PagesSortInput!]

    """
    deprecated use filter: { metadata: { attribute: { key: $key, value: $value }}}
    """
    value: String
  ): PageCollection! @deprecated(reason: "use admin_pages")
  payment(id: ID, payable_id: ID, payable_type: String): Payment @deprecated(reason: "Use our official payments module")
  payment_gateways(
    """
    If True, return gateways by a mode set in Instance Admin, default true.
    """
    for_current_mode: Boolean
    mode: PaymentGatewayMode
    payment_method_active: Boolean
    payment_method_type: [PaymentMethodType]
    type: [PaymentGatewayType]
  ): [PaymentGateway] @deprecated(reason: "Use our official payments module")
  payment_transfers(filter: PaymentTransferFilters, page: Int = 1, per_page: Int = 25, sort: [PaymentTransferSort]): PaymentTransferCollection @deprecated(reason: "Use our official payments module")
  payments(created_at: DateRange, mode: [PaymentMode], page: Int = 1, payable_id: ID, payable_type: String, payer_name: String, payment_gateway_id: ID, per_page: Int = 25, receiver_id: ID, receiver_name: String, state: [PaymentState], transferred: String): PaymentCollection @deprecated(reason: "Use our official payments module")
  people(
    aggregations: [ListingAggregation]

    """
    Geo search
    """
    geo_query: GeoQuery
    page: Int = 1
    per_page: Int = 20

    """
    Fulltext search
    """
    query: Query
    sort: [SortOrder]
    user: QueryUser
  ): UserListingCollection! @deprecated(reason: "Use users")
  request: HTTPRequestContext @deprecated(reason: "Not needed")
  seo_keywords(keywords: [String]!, page: Int = 1, per_page: Int = 20, source: String!): SeoKeywordCollection @deprecated(reason: "Use customizations")
  streams(feed_id: ID, feed_name: String, feed_type: String!, page: Int = 1, per_page: Int = 20, reset_last_read: Boolean = true): ActivityStreamsActivityStreamCollection
  transactable(
    creator_id: ID
    id: ID

    """
    Slug of the transactable
    """
    slug: String
  ): Transactable! @deprecated(reason: "Not needed")
  transactable_type(
    id: ID

    """
    Name of Transactable Type
    """
    name: String
  ): TransactableType @deprecated(reason: "Not needed; use ModelSchema instead of TransactableType")
  transactable_types(
    """
    List of ids
    """
    ids: [ID]

    """
    List of names
    """
    names: [String]
  ): [TransactableType] @deprecated(reason: "Not needed; use ModelSchema instead of TransactableType")
  transactables(page: Int = 1, per_page: Int = 20): TransactableCollection! @deprecated(reason: "Use Models instead of Transactables")

  """
  Finds non deleted users based on arguments provided
  """
  user(email: String, external_id: String, id: ID, is_deleted: Boolean, slug: String): User @deprecated(reason: "Use users")
  users(filter: UsersFilterInput, page: Int = 1, per_page: Int!, sort: [UsersSortInput!]): UserCollection!
}

"""
Deprecated
"""
type SeoData {
  highlighted: String!
  id: String!
  slug: String!
  snippet: String!
  url: String!
}

"""
Deprecated
"""
type SeoKeyword {
  category: String!
  category_url: String!
  default_page_meta_description: String!
  full_keyword_match_score: Int!
  listings(listing: QueryListing = {}, page: Int = 1, per_page: Int = 20): ListingCollection
  name: String!
  related_keywords(
    page: Int = 1
    per_page: Int = 20

    """
    available types: "similar" and "popular"
    """
    type: String!
  ): SeoKeywordCollection
  related_keywords_seo_data(
    """
    available types: "similar" and "popular"
    """
    type: String!
  ): [SeoData]
  slug: String!
  transactable_seo_data: [SeoData]
  transactables(page: Int = 1, per_page: Int = 20): TransactableCollection
  updated_at: JSONDate
  url: String!
}

"""
Deprecated
"""
type SeoKeywordCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [SeoKeyword!]
  total_entries: Int!
  total_pages: Int!
}

"""
Sms Notification
"""
type SmsNotification implements AdminSharedAttributesInterface {
  """
  liquid code to evaluate to valid text. If sms is triggered via form
  configuration, You have access to "form" variable, with data specified in the configuration.
  """
  content: String
  created_at: JSONDate!

  """
  liquid code which should evaluate to integer. Delays invoking the job by
  specified number of minutes. Useful to invoke code at certain point in time,
  for example 1 hour before something etc. To calculate proper number you can
  use time_diff filter.
  """
  delay_by: String

  """
  form configurations which trigger the email
  """
  form_configurations: [FormConfiguration!] @deprecated(reason: "use forms")

  """
  forms which trigger the email
  """
  forms: [Form!]
  id: ID!
  metadata: HashObject

  """
  name of the sms, which is used in form_configurations or mutation to trigger it
  """
  name: String!

  """
  defines the physical path of the file
  """
  physical_file_path: String

  """
  liquid code to evaluate to valid mobile number with country code, for example
  +1 541 754 3010.  Useful filter to build valid mobile number is
  "$to_mobile_number".
  """
  to: String!

  """
  liquid code which should evaluate to true if the sms should be sent
  """
  trigger_condition: String
  updated_at: JSONDate!
}

type SmsNotificationCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [SmsNotification!]
  total_entries: Int!
  total_pages: Int!
}

input SmsNotificationInputType {
  """
  liquid code to evaluate to valid form html. If sms is triggered via form
  configuration, You have access to "form" variable, with data specified in configuration.
  """
  content: String

  """
  liquid code which should evaluate to integer. Delays invoking the job by
  specified number of minutes. Useful to invoke code at certain point in time,
  for example 1 hour before something etc. To calculate proper number you can
  use time_diff filter.
  """
  delay_by: String = "0"

  """
  deprecated, use form_ids
  """
  form_configuration_ids: [ID]

  """
  ids of form configurations which should trigger the sms
  """
  form_ids: [ID]
  metadata: HashObject

  """
  name of the sms, which is used in form_configurations or mutation to trigger it
  """
  name: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/notifications/sms_notifications/my_sms_notification
  """
  physical_file_path: String!

  """
  liquid code to evaluate to valid mobile number with country code, for example
  +1 541 754 3010.     Useful filter to build valid mobile number is
  "$to_mobile_number".
  """
  to: String

  """
  liquid code which should evaluate to true if the sms should be sent
  """
  trigger_condition: String = "true"
}

input SmsNotificationsFilterInput {
  callback: StringFilter
  content: StringFilter
  created_at: DateFilter

  """
  Deprecated - use delay_by
  """
  delay: StringFilter
  delay_by: StringFilter
  id: UniqIdFilter

  """
  Filter by metadata properties
  """
  metadata: JsonbFilter
  name: StringFilter
  to: StringFilter
  trigger_condition: StringFilter
  updated_at: DateFilter
}

input SmsNotificationsSortInput {
  created_at: StandardSort
  id: StandardSort
  metadata: [JsonbSort!]
  name: StandardSort
  updated_at: StandardSort
}

input SortByChildField {
  """
  Child type, for ex. transactable
  """
  child_type: String

  """
  Sort by this field, example: "id".
  """
  field_name: String
}

input SortByDistance {
  """
  Sort by this field, example: "geo_location"
  """
  field_name: String!

  """
  Reference point, usually current location
  """
  reference_point: GeoPoint!
  unit: DistanceUnit = km
}

input SortByFieldOrder {
  """
  Sort by this field, example: "id".
  """
  field_name: String!

  """
  Sort by provided values, example: [109, 903].
  Full example: If { field_name: "id", values: [109, 903] }, Object#109 will be
  1st, Object#903 will be 2nd, and then the rest.
  """
  values: [String]!
}

input SortOrder {
  child_field: SortByChildField

  """
  Sort by distance to geo point
  """
  distance: SortByDistance

  """
  Sort by given field by provided values
  """
  field: SortByFieldOrder

  """
  Sort by field
  """
  name: String
  order: String = "asc"

  """
  Sort by distance to geo point based on custom_addresses
  """
  profile_distance: SortByDistance

  """
  To sort by profile property use `properties.` prefix, ex. `profile_field: "properties.color"`
  """
  profile_field: String

  """
  Sort by profile property`
  """
  profile_property: String

  """
  Name of the user profile type
  """
  profile_type: String

  """
  Sort by property field
  """
  property_name: String
}

enum SortOrderEnum {
  """
  for strings: `a,b,c`, for numbers: `1,2,3`
  """
  ASC

  """
  for strings: `z,x,y`, for numbers: `99,98,97`
  """
  DESC
}

input SpamProtectionInput {
  recaptcha_v2: HashObject
  recaptcha_v3: SpamProtectionRecaptchaV3Input
}

input SpamProtectionInputType {
  recaptcha_v2: HashObject
  recaptcha_v3: SpamProtectionRecaptchaV3InputType
}

input SpamProtectionRecaptchaV3Input {
  action: String!
  minimum_score: Float
}

input SpamProtectionRecaptchaV3InputType {
  action: String!
  minimum_score: Float
}

input StandalonePropertyInputType {
  """
  Type of the property
  """
  attribute_type: PropertyTypeEnum

  """
  Defines a relationship with other model schema or the user schema. Used during importing/exporting data.
  """
  belongs_to: String

  """
  Default value for new objects
  """
  default_value: String
  metadata: HashObject

  """
  Name of the property
  """
  name: String!

  """
  Id of the schema to which this property definition belongs
  """
  target_id: ID!

  """
  Type of the schema to which this property definition belongs
  """
  target_type: String!
}

input StandardSort {
  order: SortOrderEnum!

  """
  Order by specific values
  """
  order_by_values: [String!]
}

input StringFilter {
  """
  matches string within other string
  """
  contains: String
  ends_with: String

  """
  deprecated, use "value" instead
  """
  exact: String
  not_contains: String
  not_ends_with: String
  not_starts_with: String
  not_value: String
  not_value_in: [String!]
  starts_with: String
  value: String
  value_in: [String!]
}

"""
Third Party Integration
"""
type ThirdPartyIntegration {
  created_at: JSONDate!
  id: ID!
  settings: HashObject!
  type: String!
  updated_at: JSONDate!
}

type ThirdPartyIntegrationCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [ThirdPartyIntegration!]
  total_entries: Int!
  total_pages: Int!
}

input ThirdPartyIntegrationsFilterInput {
  created_at: DateFilter
  id: UniqIdFilter
  type: StringFilter
  updated_at: DateFilter
}

input ThirdPartyIntegrationsSortInput {
  created_at: StandardSort
  id: StandardSort
  type: StandardSort
  updated_at: StandardSort
}

type Transactable implements RelationOnDemandInterface {
  created_at: JSONDate
  creator: User
  creator_id: ID
  custom_address(name: String!): CustomAddrress
  custom_image(name: String!): [ListingImage]

  """
  Fetch any customization by name or id; ex: hair_color: customization(name: "hair_color")
  """
  customizations(id: ID, name: String, user_id: ID): [Customization!]
  external_id: ID
  id: ID!
  is_deleted: Boolean

  """
  Defines belongs-to relation with other model; ex: parent: model(model_name:
  "parent", join_on_property: "parent_id") { id }
  """
  model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_name: String
  ): ListingsCustomization @deprecated(reason: "use `related_model`")

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_name: [String]
  ): [ListingsCustomization!] @deprecated(reason: "use `related_models`")
  name: String

  """
  Fetch any Property by name; ex: hair_color: property(name: "hair_color")
  """
  property(name: String!): String
  property_array(name: String!): [String!]!

  """
  Defines belongs-to relation with other model; ex: parent: model(model_name:
  "parent", join_on_property: "parent_id") { id }
  """
  related_model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_schema_name: String
  ): ListingsCustomization

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  related_models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_schema_name: [String]
  ): [ListingsCustomization!]

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  related_user(foreign_property: String = "id", join_on_property: String = "user_id"): User
  slug: String!
  updated_at: JSONDate

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  user(foreign_property: String = "id", join_on_property: String = "user_id"): User @deprecated(reason: "use `related_users`")
}

type TransactableCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [Transactable!]
  total_entries: Int!
  total_pages: Int!
}

input TransactableImport {
  addresses: [AddressImport!]
  attachments: [AttachmentsImport!]
  created_at: ISO8601DateTime
  creator_id: ID!

  """
  ID will be changed after import, relations will be preseved
  """
  id: ID!
  images: [ImagesImport!]
  name: String

  """
  ex. {"color": "red"}
  """
  properties: HashObject
  slug: String!
  type_name: String!
  updated_at: ISO8601DateTime
}

input TransactableInputType {
  creator_id: ID
  currency: String
  description: String
  name: String
  properties: [CustomAttributeInputType]
  quantity: Int
  slug: String
  state_event: String
  transactable_type_name: String
}

"""
Schema for transactable (old name was TransactableType). Deprecated, use ModelSchema
"""
type TransactableSchema implements AdminPropertiesInterface & AdminSharedAttributesInterface {
  created_at: JSONDate!

  """
  Deprecated, use properties instead.
  """
  fields: [Property!]! @deprecated(reason: "Use properties")
  id: ID!
  metadata: HashObject
  name: String!
  parameterized_name: String!

  """
  defines the physical path of the file
  """
  physical_file_path: String

  """
  List of properties attributes to be included in the results
  """
  properties: [Property!]!
  updated_at: JSONDate!
}

type TransactableSchemaCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [TransactableSchema!]
  total_entries: Int!
  total_pages: Int!
}

input TransactableSchemaInputType {
  """
  deprecated, use properties
  """
  fields: [NestedPropertyInputType]
  name: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/transactable_types/my_transactable
  """
  physical_file_path: String!
  properties: [NestedPropertyInputType]
}

input TransactableSchemasFilterInput {
  created_at: DateFilter
  id: UniqIdFilter
  name: StringFilter
  parameterized_name: StringFilter
  updated_at: DateFilter
}

input TransactableSchemasSortInput {
  created_at: StandardSort
  id: StandardSort
  name: StandardSort
  parameterized_name: StandardSort
  updated_at: StandardSort
}

type TransactableType {
  id: ID!
  name: String!
}

input UniqIdFilter {
  not_value_in: [ID!]
  value: ID
  value_in: [ID!]
}

input UpdateApiCallNotificationInputType {
  """
  liquid code which can be used to process the response from the endpoint. You have access to "response" variable.
  """
  callback: String

  """
  liquid code to evaluate to whatever you want to send, for example a JSON.
  """
  content: String

  """
  liquid code which should evaluate to integer. Delays invoking the job by
  specified number of minutes. Useful to invoke code at certain point in time,
  for example 1 hour before something etc. To calculate proper number you can
  use time_diff filter.
  """
  delay_by: String = "0"

  """
  ids of form configurations which should trigger the api call
  """
  form_configuration_ids: [ID]

  """
  Request headers
  """
  headers: HashObject
  metadata: HashObject

  """
  name of the api call, which is used in form_configurations or mutation to trigger it
  """
  name: String

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/notifications/api_call_notifications/my_api_call_notification
  """
  physical_file_path: String

  """
  Liquid code which should evaluate to valid request type: Get, Post, Put,
  Patch, Delete or if you want to send binary files: Post_Multipart,
  Put_Multipart, Patch_Multipart
  """
  request_type: String

  """
  liquid code to evaluate to valid endpoint for the request.
  """
  to: String

  """
  liquid code which should evaluate to true if the api call should be sent
  """
  trigger_condition: String = "true"
}

input UpdateAuthorizationPolicyInputType {
  content: String
  flash_alert: String
  metadata: HashObject
  name: String

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/authorization_policies/my_policy
  """
  physical_file_path: String
  redirect_to: String
}

input UpdateCustomAttachmentInputType {
  custom_attribute_name: String

  """
  URL to image that was uploaded to s3 presigned url
  """
  direct_url: String
  owner_id: ID
  owner_type: String
  page_slug: String
  uploader_id: ID
}

"""
Autogenerated return type of UpdateCustomizationsMutation
"""
type UpdateCustomizationsMutationPayload {
  ids: [ID!]!
}

input UpdateEmailNotificationInputType {
  """
  json of the form { "file_name.jpg": { "url": "http://example.com/file.jpg" } }
  which defines email attachments. Liquid will be processed.
  """
  attachments: String

  """
  liquid code to evaluate to valid, comma separated blind carbon copy list, for example "john@example.com, jane@example.com"
  """
  bcc: String

  """
  liquid code to evaluate to valid, comma separated carbon copy list, for example "john@example.com, jane@example.com"
  """
  cc: String

  """
  liquid code to evaluate to valid form html. If email is triggered via form
  configuration, You have access to "form" variable, with data specified in configuration.
  """
  content: String

  """
  liquid code which should evaluate to integer. Delays invoking the job by
  specified number of minutes. Useful to invoke code at certain point in time,
  for example 1 hour before something etc. To calculate proper number you can
  use time_diff filter.
  """
  delay_by: String = "0"

  """
  ids of form configurations which should trigger the email
  """
  form_configuration_ids: [ID]

  """
  email address from which you would like to send the email, for example notifications@mydomain.com
  """
  from: String

  """
  name of the liquid layout to which the content should be injected
  """
  layout_path: String
  metadata: HashObject

  """
  name of the email, which is used in form_configurations or mutation to trigger it
  """
  name: String

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/notifications/email_notifications/my_email_notification
  """
  physical_file_path: String

  """
  email address to which users should reply, for example support@mydomain.com
  """
  reply_to: String

  """
  liquid code to evaluate to text
  """
  subject: String

  """
  liquid code to evaluate to valid, comma separated recipient list, for example "john@example.com, jane@example.com"
  """
  to: String

  """
  liquid code which should evaluate to true if the email should be sent
  """
  trigger_condition: String = "true"
}

input UpdateFormConfigurationInputType {
  """
  Same as callback, but invoked asynchronously. Recommended for performance reason.
  """
  async_callback_actions: String

  """
  liquid code which should evaluate to float. Delays invoking the job by
  specified number of minutes. Useful to invoke code at certain point in time,
  for example 1 hour before something etc. To calculate proper number you can
  use time_diff filter.
  """
  async_callback_delay: String = "0"

  """
  Defines max number of retrying attempts in case of an error. Usually you do not want to change it.
  """
  async_callback_max_attempts: Int = 1

  """
  defines the invocaction priority, the higher the quicker timeout
  """
  async_callback_priority: AsyncCallbackPriority = default

  """
  ids of authorization policies which should be checked
  """
  authorization_policy_ids: [ID]

  """
  liquid code to be invoked after persisting input to DB. If possible, use async callback actions instead
  """
  callback_actions: String

  """
  whitelist of attributes which can be persisted in the DB. On server side
  (callbacks, emails etc) you have access to submited values via form variable
  (for exapmple configuration: properties: my_var is accessible via
  form.properties.my_var )
  """
  configuration: HashObject = {}

  """
  liquid code which has to evaluate to JSON. This extends/overwrites user
  submitted input via form, before validation. Most useful to store in DB
  sensitive data which you do not want user to modify, for example
  context.current_user.id
  """
  default_payload: String

  """
  liquid code which should evaluate to message which you want to display to user
  upon validation errors. Output is available via context.flash_alert
  """
  flash_alert: String

  """
  liquid code which should evaluate to message which you want to display to user
  after successful form submission. Output is available via context.flash_notice
  """
  flash_notice: String

  """
  liquid code to evaluate to valid form html. You have access to form_builder variable and form tag.
  """
  liquid_body: String
  metadata: HashObject
  name: String

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/form_configurations/my_form_configuration
  """
  physical_file_path: String

  """
  liquid code which should evaluate to valid path or url to which user should be
  redirected after successful form submission.
  """
  redirect_to: String
  resource: String

  """
  defines who can submit the form. If set to anyone, please make sure to provide authorization_policies
  """
  resource_owner: String

  """
  strategy to protect against spam attacks.
  """
  spam_protection: SpamProtectionInputType = null
}

input UpdateFormInput {
  """
  Same as callback, but invoked asynchronously. Recommended for performance reason.
  """
  async_callback_actions: String

  """
  liquid code which should evaluate to float. Delays invoking the job by
  specified number of minutes. Useful to invoke code at certain point in time,
  for example 1 hour before something etc. To calculate proper number you can
  use time_diff filter.
  """
  async_callback_delay: String = "0"

  """
  Defines max number of retrying attempts in case of an error. Usually you do not want to change it.
  """
  async_callback_max_attempts: Int = 1

  """
  defines the invocaction priority, the higher the quicker timeout
  """
  async_callback_priority: AsyncCallbackPriority = default

  """
  ids of authorization policies which should be checked
  """
  authorization_policy_ids: [ID!]

  """
  liquid code to be invoked after persisting input to DB. If possible, use async callback actions instead
  """
  callback_actions: String

  """
  whitelist of attributes which can be persisted in the DB. On server side
  (callbacks, emails etc) you have access to submited values via form variable
  (for exapmple configuration: properties: my_var is accessible via
  form.properties.my_var )
  """
  configuration: HashObject

  """
  liquid code which has to evaluate to JSON. This extends/overwrites user
  submitted input via form, before validation. Most useful to store in DB
  sensitive data which you do not want user to modify, for example
  context.current_user.id
  """
  default_payload: String

  """
  liquid code which should evaluate to message which you want to display to user
  upon validation errors. Output is available via context.flash_alert
  """
  flash_alert: String

  """
  liquid code which should evaluate to message which you want to display to user
  after successful form submission. Output is available via context.flash_notice
  """
  flash_notice: String

  """
  liquid code to evaluate to valid form html. You have access to form_builder variable and form tag.
  """
  liquid_body: String
  metadata: HashObject
  name: String

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/forms/my_form
  """
  physical_file_path: String

  """
  liquid code which should evaluate to valid path or url to which user should be
  redirected after successful form submission.
  """
  redirect_to: String
  resource: String

  """
  defines who can submit the form. If set to anyone, please make sure to provide authorization_policies
  """
  resource_owner: String

  """
  strategy to protect against spam attacks.
  """
  spam_protection: SpamProtectionInput = null
}

input UpdateLiquidLayoutInputType {
  body: String
  format: PageFormat = html
  metadata: HashObject
  path: String

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/views/layouts/my_layout
  """
  physical_file_path: String
}

input UpdateLiquidPartialInputType {
  body: String
  format: PageFormat = html
  metadata: HashObject
  path: String

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/views/partials/my_partial
  """
  physical_file_path: String
}

input UpdateModelSchemaInputType {
  """
  deprecated, use properties
  """
  fields: [NestedPropertyInputType]
  metadata: HashObject
  name: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/custom_model_types/my_model
  """
  physical_file_path: String
  properties: [NestedPropertyInputType]
}

input UpdatePageInputType {
  """
  ids of authorization policies which should be checked
  """
  authorization_policy_ids: [ID]
  content: String
  dynamic_cache_expire: Int = 3
  dynamic_cache_key: String
  dynamic_cache_layout: Boolean = false
  format: PageFormat = html
  handler: PageHandler = liquid
  layout_name: String

  """
  max nesting of the url to be resolved by this slug. For example slug "abc"
  with max_deep_level 2 will resolve /abc, abc/1, abc/2, but will NOT resolve
  abc/2/something.
  """
  max_deep_level: Int = 3
  metadata: HashObject

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/views/pages/my-page
  """
  physical_file_path: String
  redirect_code: PageRedifectCode
  redirect_to: String
  request_method: PageRequestMethod = get
  response_headers: HashObject
  searchable: Boolean = false
  slug: String
  static_cache_expire: Int = 3
}

input UpdatePaymentInputType {
  amount: PaymentAmountInputType
  bank_account_id: ID
  credit_card_id: ID
  credit_card_token: String
  direct_charge: Boolean
  paid_at: String
  payable_id: ID
  payable_type: String
  payer_id: ID
  payment_method_id: ID
  receiver_id: ID
}

input UpdateSmsNotificationInputType {
  """
  liquid code to evaluate to valid form html. If sms is triggered via form
  configuration, You have access to "form" variable, with data specified in configuration.
  """
  content: String

  """
  liquid code which should evaluate to integer. Delays invoking the job by
  specified number of minutes. Useful to invoke code at certain point in time,
  for example 1 hour before something etc. To calculate proper number you can
  use time_diff filter.
  """
  delay_by: String = "0"

  """
  deprecated, use form_ids
  """
  form_configuration_ids: [ID]
  metadata: HashObject

  """
  name of the sms, which is used in form_configurations or mutation to trigger it
  """
  name: String

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/notifications/sms_notifications/my_sms_notification
  """
  physical_file_path: String

  """
  liquid code to evaluate to valid mobile number with country code, for example
  +1 541 754 3010.     Useful filter to build valid mobile number is
  "$to_mobile_number".
  """
  to: String

  """
  liquid code which should evaluate to true if the sms should be sent
  """
  trigger_condition: String = "true"
}

input UpdateStandalonePropertyInputType {
  """
  Type of the property
  """
  attribute_type: PropertyTypeEnum

  """
  Defines a relationship with other model schema or the user schema. Used during importing/exporting data.
  """
  belongs_to: String

  """
  Default value for new objects
  """
  default_value: String
  metadata: HashObject

  """
  Name of the property
  """
  name: String

  """
  Id of the schema to which this property definition belongs
  """
  target_id: ID

  """
  Type of the schema to which this property definition belongs
  """
  target_type: String
}

input UpdateTransactableSchemaInputType {
  """
  deprecated, use properties
  """
  fields: [NestedPropertyInputType]
  name: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/transactable_types/my_transactable
  """
  physical_file_path: String
  properties: [NestedPropertyInputType]
}

input UpdateUserProfileSchemaInputType {
  """
  deprecated, use properties
  """
  fields: [NestedPropertyInputType]
  metadata: HashObject
  name: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/user_profile_types/my_user_profile
  """
  physical_file_path: String
  properties: [NestedPropertyInputType]
}

"""
Autogenerated return type of UpdateUsersMutation
"""
type UpdateUsersMutationPayload {
  ids: [ID!]!
}

enum UploadType {
  """
  Attachment
  """
  attachment

  """
  Image
  """
  image
}

type User implements HasModelsInterface & LegacyCustomAttributeInterface & PropertiesInterface {
  """
  Fetch address by name; ex: address: address(name: "office_address")
  """
  address(name: String!): CustomAddrress

  """
  Fetch all addresses, optionally you can filter results by name; ex: home_address: addresses(name: "home")
  """
  addresses(name: String): [CustomAddrress!]

  """
  Fetch attachment by name; ex: sales_report: attachment(name: "sales_report")
  """
  attachment(name: String!): PrivateFile

  """
  Fetch all attachments, optionally you can filter results by name; ex: sales_reports: attachments(name: "sales_report")
  """
  attachments(name: String): [PrivateFile!]

  """
  stores information about user integrations with authentication providers like auth0, facebook, twitter etc
  """
  authentications: [Authentication!]
  bank_accounts(payment_method_id: ID): [BankAccount!] @deprecated(reason: "use our module https://github.com/mdyd-dev/platformos-payments")

  """
  used for twilio click-to-call integraation to verify phone number
  """
  communication: Communication

  """
  timestamp of when the record was created, automatically generated by the system
  """
  created_at: JSONDate
  credit_cards(payment_method_id: ID): [CreditCard!] @deprecated(reason: "use our module https://github.com/mdyd-dev/platformos-payments")

  """
  Fetch address by name; ex: address: custom_address(name: "office_address")
  """
  custom_address(name: String!): CustomAddrress @deprecated(reason: "Use address")

  """
  Fetch all addresses, optionaly you can filter results by name; ex: home: custom_addresses(name: "home")
  """
  custom_addresses(name: String): [CustomAddrress!] @deprecated(reason: "Use addresses")

  """
  Fetch attachment by name; ex: sales_report: custom_attachment(name: "sales_report")
  """
  custom_attachment(name: String!): PrivateFile @deprecated(reason: "Use attachment")

  """
  Fetch all attachments, optionally you can filter results by name; ex:
  sales_reports: custom_attachments(name: "sales_report")
  """
  custom_attachments(name: String): [PrivateFile!] @deprecated(reason: "Use attachments")

  """
  Fetch image by name; ex: header: custom_image(name: "header")
  """
  custom_image(name: String!): Image @deprecated(reason: "Use image")

  """
  Fetch all images, optionaly you can filter results by name; ex: cat_images: custom_images(name: "cat")
  """
  custom_images(name: String): [Image!] @deprecated(reason: "Use images")
  customizations(
    """
    model schema name
    """
    name: String

    """
    ID of user that created customization
    """
    user_id: ID
  ): [Customization!]

  """
  timestamp of when the record was soft delete, populated by delete action. It
  is also possible to manually set it via update. To undelete change it back to
  empty value, but please note that associated records would need to be manually
  undeleted as well.
  """
  deleted_at: JSONDate
  email: String!

  """
  Used mainly for import/export, if you want to use third party service as a source of truth
  """
  external_id: String
  first_name: String

  """
  ID of an object.
  """
  id: ID

  """
  Fetch image by name; ex: header: image(name: "header")
  """
  image(name: String!): Image

  """
  Fetch all images, optionally you can filter results by name; ex: cat_images: images(name: "cat")
  """
  images(name: String): [Image!]

  """
  JWT token that can be used for authentication
  """
  jwt_token: String

  """
  Used by translations to set the language of currently logged in user
  """
  language: String
  last_name: String
  merchant_accounts: [MerchantAccount!] @deprecated(reason: "use our module https://github.com/mdyd-dev/platformos-payments")
  middle_name: String

  """
  Defines has-one relation with other model, e.g: children: models(model_name:
  "child" join_on_property: "parent_id" foreign_property: "parent_id") { id }
  """
  model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_name
    """
    model_name: [String]!
  ): Model @deprecated(reason: "use `related_model`")

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_name
    """
    model_name: [String]!
  ): [Model!] @deprecated(reason: "use `nested_models`")
  name: String
  profile(profile_type: String!): Profile @deprecated(reason: "use profiles")

  """
  associated user profiles, which can be used as user role or namespace for certain group of user properties
  """
  profiles(profile_type: String): [Profile!]!

  """
  List of all properties assigned to the object.
  """
  properties: HashObject

  """
  Fetch any property by name and return value as a String; ex: hair_color: property(name: "hair_color")
  """
  property(name: String!): String

  """
  Fetch any property by name and return value as an Array of Strings. ex: todo_list: property_array(name: "todo_list")
  """
  property_array(name: String!): [String!]

  """
  Fetch any property by name and return value as a Boolean; ex: price: property_boolean(name: "enabled")
  """
  property_boolean(name: String!): Boolean

  """
  Fetch any property by name and return value as a Float; ex: price: property_float(name: "price")
  """
  property_float(name: String!): Float

  """
  Fetch any property by name and return value as an Integer; ex: age: property_int(name: "age")
  """
  property_int(name: String!): Int

  """
  Fetch any property by name and return value as a JSON.
  """
  property_json(name: String!): JSONPayload

  """
  Defines has-one relation with other model; ex: children: models(model_name:
  "child" join_on_property: "parent_id" foreign_property: "parent_id") { id }
  """
  related_model(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_schema_name
    """
    model_schema_name: [String]!
  ): Model

  """
  Defines has-many relation with other model; ex: children:
  related_models(model_schema_name: "child", join_on_property: "parent_id",
  foreign_property: "parent_id") { id }
  """
  related_models(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with model-schema-name == model_schema_name
    """
    model_schema_name: [String]!
  ): [Model!]

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  related_user(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    """
    join_on_property: String = "user_id"
  ): User

  """
  Defines has-many relation with other user; ex: children:
  users(join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  related_users(
    filter: ModelsFilterInput

    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!
  ): [User!]

  """
  To be used in the url instead of id for SEO purposes. Must be unique. By
  default generated based on first-name and last-mame
  """
  slug: String!

  """
  determined based on authentications. For example, if user connects FB account,
  this will make API call to FB and check, if any of his friends have account on your Site
  """
  social_friends(page: Int = 1, per_page: Int = 20): UserCollection

  """
  A token valid for desired number of hours, which you can use to authorize the
  user in third party application. To do it, include it in a header with name
  UserTemporaryToken. You can also manually verify the token in liquid using
  is_token_valid filter
  """
  temporary_token(
    """
    Number of hours before the token expires
    """
    valid_for: Int = 48
  ): String
  transactables: [Transactable!] @deprecated(reason: "use customizations")

  """
  timestamp of when the record was updated, automatically generated by the system
  """
  updated_at: JSONDate

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  user(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    """
    join_on_property: String = "user_id"
  ): User @deprecated(reason: "use `nested_user`")

  """
  Defines has-many relation with other user; ex: children:
  users(join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  users(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!
  ): [User!] @deprecated(reason: "use `nested_users`")
}

type UserCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [User!]
  total_entries: Int!
  total_pages: Int!
}

input UserImport {
  created_at: JSONDate
  email: String!
  external_id: ID
  first_name: String

  """
  ID will be stored as external_id, relations will be preseved. We generate it when empty.
  """
  id: ID
  last_name: String
  middle_name: String
  name: String
  password: String
  profiles: [UserProfileImportType!] = []

  """
  ex. {"color": "red"}
  """
  properties: HashObject
  slug: String!
  updated_at: JSONDate
}

input UserInputType {
  authentications: [AuthenticationInputType]
  custom_attachments: [AtachmentInputType]
  custom_images: [ImageInputType]
  deleted_at: JSONDate
  email: String
  external_id: ID
  first_name: String
  last_name: String
  middle_name: String
  name: String
  password: String
  profiles: [UserProfileInputType]
  properties: [CustomAttributeInputType]
  slug: String
}

type UserListing implements ListingCustomAttributeInterface & ListingsMetadata & RelationOnDemandInterface & RemoteModelInterface {
  authentications: [Authentication!]
  communication: ListingsCommunication
  created_at: JSONDate

  """
  Fetch address by name; ex: address: custom_address(name: "office_address")
  """
  custom_address(name: String!): ListingAddress

  """
  Fetch all addresses, optionaly you can filter results by name; ex: home: custom_addresses(name: "home")
  """
  custom_addresses(name: String): [ListingAddress!]

  """
  Fetch attachment by name; ex: sales_report: custom_attachment(name: "sales_report")
  """
  custom_attachment(name: String!): ListingsPrivateFile
  custom_attachments(name: String): [ListingsPrivateFile!]

  """
  Fetch image by name; ex: header: custom_image(name: "header")
  """
  custom_image(name: String!): ListingImage

  """
  Fetch all images, optionaly you can filter results by name; ex: cat_images: custom_images(name: "cat")
  """
  custom_images(name: String): [ListingImage!]
  customizations(name: String, properties: [QueryCustomAttribute], user_id: ID): [ListingsCustomization!]
  deleted_at: JSONDate
  email: String!
  external_id: ID
  first_name: String
  id: ID!
  language: String
  last_name: String
  middle_name: String

  """
  Defines belongs-to relation with other model; ex: parent: model(model_name:
  "parent", join_on_property: "parent_id") { id }
  """
  model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_name: String
  ): ListingsCustomization @deprecated(reason: "use `related_model`")

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_name: [String]
  ): [ListingsCustomization!] @deprecated(reason: "use `related_models`")
  name: String!
  profile(profile_type: String!): ListingUserProfile
  profiles: [ListingUserProfile!]

  """
  List of all properties assigned to the object.
  """
  properties: HashObject

  """
  Fetch any custom attribute by name; ex: hair_color: property(name: "hair_color")
  """
  property(name: String!): String

  """
  Fetch any property of Array type by name, it returns Array in contrast to
  "property" which returns String; ex: todo_list: property_array(name: "todo_list")
  """
  property_array(name: String!): [String!]

  """
  Fetch any property of JSON type by name, it returns JSON in contrast to
  "property" which returns String; ex: todo_list: property_json(name: "todo_list")
  """
  property_json(name: String!): JSONPayload

  """
  Defines belongs-to relation with other model; ex: parent: model(model_name:
  "parent", join_on_property: "parent_id") { id }
  """
  related_model(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String = "id"

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_schema_name: String
  ): ListingsCustomization

  """
  Defines has-many relation with other model; ex: children: models(model_name:
  "child", join_on_property: "parent_id", foreign_property: "parent_id") { id }
  """
  related_models(
    """
    Load resources with foreign_property == join_on_property
    """
    foreign_property: String!

    """
    Load resources with foreign_property == join_on_property
    """
    join_on_property: String!

    """
    Joins model [formaly customization] with custom-model-type-name == model_name
    """
    model_schema_name: [String]
  ): [ListingsCustomization!]

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  related_user(foreign_property: String = "id", join_on_property: String = "user_id"): User

  """
  Defines relation object accessible over HTTP in JSON collection identified by it's ID.
  """
  remote_model(
    """
    Endpoint that will return resources for given ids in json format
    """
    endpoint: Endpoint!

    """
    Load remote resource with id == join_on_property
    """
    join_on_property: String!
  ): Customization
  slug: String

  """
  when sorting by distance - field contains distance to target location
  """
  sort_score: [Int] @deprecated(reason: "not supported everywhere")
  temporary_token(
    """
    Number of hours before the token expires
    """
    valid_for: Int
  ): String
  updated_at: JSONDate

  """
  Defines relation with other user; ex: invited_by: user(join_on_property: "invited_by_id") { id }
  """
  user(foreign_property: String = "id", join_on_property: String = "user_id"): User @deprecated(reason: "use `related_users`")
}

type UserListingCollection {
  aggregations: Aggregations!
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  page: Int! @deprecated(reason: "use current_page")
  per_page: Int!
  results: [UserListing!]
  size: Int!
  total_entries: Int!
  total_pages: Int!
}

input UserProfileImportType {
  addresses: [AddressImport!]
  attachments: [AttachmentsImport!]

  """
  ID will be stored as external_id, relations will be preseved. We generate it when empty.
  """
  id: ID
  images: [ImagesImport!]

  """
  ex. {"color": "red"}
  """
  properties: HashObject
  type_name: String!
}

input UserProfileInputType {
  name: String
  values: DefaultProfileInputType
}

"""
Schema for user profile (old name was UserProfileType)
"""
type UserProfileSchema implements AdminPropertiesInterface & AdminSharedAttributesInterface {
  created_at: JSONDate!

  """
  Deprecated, use properties instead.
  """
  fields: [Property!]! @deprecated(reason: "Use properties")
  id: ID!
  metadata: HashObject
  name: String!
  parameterized_name: String!

  """
  defines the physical path of the file
  """
  physical_file_path: String

  """
  List of properties attributes to be included in the results
  """
  properties: [Property!]!
  updated_at: JSONDate!
}

type UserProfileSchemaCollection {
  current_page: Int!
  has_next_page: Boolean!
  has_previous_page: Boolean!
  per_page: Int!
  results: [UserProfileSchema!]
  total_entries: Int!
  total_pages: Int!
}

input UserProfileSchemaInputType {
  """
  deprecated, use properties
  """
  fields: [NestedPropertyInputType]
  metadata: HashObject
  name: String!

  """
  defines where the file definition will be available after pull; should start
  with the module name follow by private/public scope, for example
  manual/public/user_profile_types/my_user_profile
  """
  physical_file_path: String!
  properties: [NestedPropertyInputType]
}

input UserProfileSchemasFilterInput {
  created_at: DateFilter
  id: UniqIdFilter

  """
  Filter by metadata properties
  """
  metadata: JsonbFilter
  name: StringFilter
  parameterized_name: StringFilter
  updated_at: DateFilter
}

input UserProfileSchemasSortInput {
  created_at: StandardSort
  id: StandardSort
  metadata: [JsonbSort!]
  name: StandardSort
  parameterized_name: StandardSort
  updated_at: StandardSort
}

input UserProfileUpdateType {
  addresses: [AddressImport!]
  attachments: [AttachmentsImport!]

  """
  ID must match existing object id
  """
  id: ID!
  images: [ImagesImport!]

  """
  ex. {"color": "red"}
  """
  properties: HashObject
  type_name: String!
}

input UserPropertyInput {
  property_name: String!
}

input UserUpdate {
  created_at: JSONDate
  email: String!
  external_id: ID
  first_name: String

  """
  ID must match existing object id
  """
  id: ID!
  last_name: String
  middle_name: String
  name: String
  profiles: [UserProfileUpdateType!] = []
  slug: String!
  updated_at: JSONDate
}

input UsersFilterInput {
  created_at: DateFilter
  deleted_at: DateFilter
  email: StringFilter
  external_id: UniqIdFilter
  first_name: StringFilter
  id: UniqIdFilter
  last_name: StringFilter
  name: StringFilter

  """
  join arguments with OR operator
  """
  or: [UsersFilterInput!]
  profiles: [ProfileFilterInput!]
  properties: [PropertyFilterInput!]
  slug: StringFilter
  updated_at: DateFilter
}

input UsersSortInput {
  created_at: StandardSort
  deleted_at: StandardSort
  email: StandardSort
  external_id: StandardSort
  first_name: StandardSort
  id: StandardSort
  last_name: StandardSort
  name: StandardSort
  profile_properties: [PropertySort!]
  slug: StandardSort
  updated_at: StandardSort
}

input VersionInput {
  manipulate: VersionManipulateInput

  """
  name of the version, for example thumb
  """
  name: String!
  output: VersionOutputInput
  resize: VersionResizeInput
}

input VersionManipulateInput {
  """
  value representing the sigma of the Gaussian mask, where sigma = 1 + radius / 2
  """
  blur: ImageBlur

  """
  color for flatten
  """
  flatten: CssColor = "#000000"

  """
  Convert to 8-bit greyscale; 256 shades of grey.
  """
  greyscale: Boolean = false
}

input VersionOutputInput {
  format: ImageFormat

  """
  defines the quality of the image; used to automatically compress the image; 0 - lowest quality, 100 - highest quality
  """
  quality: ImageQuality
}

input VersionResizeInput {
  """
  deprecated
  """
  backgound: CssColor

  """
  background color when using a fit of containDefault: #000000
  """
  background: CssColor
  fit: ImageResizeFit = cover

  """
  max height of an image. If left undefined, will depend on other parameters to determine size (like: width)
  """
  height: Int

  """
  position to use when fit is cover or contain
  """
  position: ImageResizePosition

  """
  max width of an image. If left undefined, will depend on other parameters to determine size (like: height) 
  """
  width: Int

  """
  do not enlarge if the width or height are already less than the specified dimensions
  """
  without_enlargement: Boolean = false
}